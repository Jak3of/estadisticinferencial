import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path

def latex_copyable(formula, label):
    """Muestra una f√≥rmula LaTeX con un bot√≥n para copiar."""
    col1, col2 = st.columns([4, 1])
    with col1:
        st.latex(formula)
    with col2:
        if st.button(f"üìã Copiar", key=f"copy_{label}"):
            try:
                st.code(formula, language="latex")
                st.toast("¬°F√≥rmula mostrada! Puedes copiarla desde el bloque de c√≥digo", icon="‚úÖ")
            except Exception as e:
                st.error(f"Error al mostrar la f√≥rmula: {str(e)}")

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="An√°lisis Inferencial", page_icon="üîç", layout="wide")

# JavaScript para copiar al portapapeles
st.markdown("""
<script>
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(function() {
        console.log('Copying to clipboard was successful!');
    }, function(err) {
        console.error('Could not copy text: ', err);
    });
}
</script>
""", unsafe_allow_html=True)

# Funci√≥n para cargar datos
@st.cache_data(ttl=0)  # ttl=0 significa que el cach√© se invalida en cada recarga
def cargar_datos():
    ruta_base = Path(__file__).parent.parent
    ruta_datos = ruta_base / 'data' / 'encuesta_recreacion_numerica.csv'
    df = pd.read_csv(ruta_datos)
    # Asegurarnos que Genero sea tipo int
    df['Genero'] = df['Genero'].astype(int)
    # Asegurarnos que Importancia_Costo sea tipo int
    df['Importancia_Costo'] = df['Importancia_Costo'].astype(int)
    return df

# Cargar datos
df = cargar_datos()

# T√≠tulo principal
st.title("üîç An√°lisis Inferencial")
st.write("An√°lisis estad√≠stico inferencial de la encuesta de recreaci√≥n")

# Crear tabs principales
tab1, tab2 = st.tabs(["6. Distribuciones Muestrales", "7. Intervalos de Confianza"])

with tab1:
    st.header("6. Distribuciones Muestrales")
    
    # Subtabs para cada tipo de distribuci√≥n muestral
    dist_tabs = st.tabs([
        "a) Media (œÉ conocida)",
        "b) Media (œÉ desconocida)",
        "c) Diferencia Medias (œÉ conocida)",
        "d) Diferencia Medias (œÉ iguales)",
        "e) Diferencia Medias (œÉ diferentes)",
        "f) Proporci√≥n",
        "g) Diferencia Proporciones"
    ])
    
    # a) Media con Varianza Conocida
    with dist_tabs[0]:
        st.subheader("a) Distribuci√≥n Muestral para la Media con Varianza Conocida")
        
        # Selecci√≥n de variable
        variable = st.selectbox(
            "Seleccione la variable num√©rica a analizar:",
            ["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
            key="var_normal"
        )
        
        # Calcular estad√≠sticos
        datos_variable = df[variable].dropna()
        n = len(datos_variable)
        media = datos_variable.mean()
        std = datos_variable.std()
        
        # Planteamiento del problema
        st.write(f"""
        ### Planteamiento del Problema
        
        Se sabe que, en promedio, {media:.2f} es el valor de **{variable}** en el centro de recreaci√≥n. 
        Estudios previos indican que la desviaci√≥n est√°ndar de este n√∫mero es de {std:.2f}. 
        Se tiene una muestra de {n} personas.
        """)
        
        st.write("¬øCu√°l es la probabilidad de que la media de esa muestra:")
        
        # Valores a analizar
        valor1 = st.number_input(f"a) Sea mayor a:", value=float(media + std/2), step=0.1)
        valor2 = st.number_input(f"b) Sea menor a:", value=float(media - std/2), step=0.1)
        
        # F√≥rmula principal con bot√≥n de copiar
        st.write("### F√≥rmula:")
        latex_copyable(r"Z = \frac{\bar{X} - \mu}{\sigma/\sqrt{n}}", "principal")
        
        # Donde:
        st.write("""
        Donde:
        - XÃÑ: Media muestral
        - Œº: Media poblacional
        - œÉ: Desviaci√≥n est√°ndar poblacional
        - n: Tama√±o de la muestra
        """)
        
        # Datos
        st.write("### Datos:")
        st.write(f"""
        œÉ = {std:.2f}
        Œº = {media:.2f}
        n = {n}
        """)
        
        # Desarrollo a)
        st.write(f"### a) Sea mayor a {valor1}")
        latex_copyable(f"P(\\bar{{x}} > {valor1}) = 1 - P(\\bar{{x}} \\leq {valor1})", "prob_a1")
        
        st.write("Estandarizando:")
        z_score1 = (valor1 - media)/(std/np.sqrt(n))
        latex_copyable(f"P(\\bar{{x}} > {valor1}) = 1 - P(Z \\leq {z_score1:.2f})", "prob_a2")
        
        prob_mayor = 1 - stats.norm.cdf(z_score1)
        latex_copyable(f"P(\\bar{{x}} > {valor1}) = 1 - {1-prob_mayor:.5f}", "prob_a3")
        latex_copyable(f"P(\\bar{{x}} > {valor1}) = {prob_mayor:.5f}", "prob_a4")
        
        # Desarrollo b)
        st.write(f"### b) Sea menor a {valor2}")
        latex_copyable(f"P(\\bar{{x}} < {valor2})", "prob_b1")
        
        st.write("Estandarizando:")
        z_score2 = (valor2 - media)/(std/np.sqrt(n))
        latex_copyable(f"P(\\bar{{x}} < {valor2}) = P(Z < {z_score2:.2f})", "prob_b2")
        
        prob_menor = stats.norm.cdf(z_score2)
        latex_copyable(f"P(\\bar{{x}} < {valor2}) = {prob_menor:.5f}", "prob_b3")

        # Visualizaci√≥n
        fig = px.histogram(df, x=variable, nbins=20, title=f"Distribuci√≥n de {variable}")
        fig.add_vline(x=valor1, line_dash="dash", line_color="red", annotation_text="Valor 1")
        fig.add_vline(x=valor2, line_dash="dash", line_color="blue", annotation_text="Valor 2")
        fig.add_vline(x=media, line_dash="solid", line_color="green", annotation_text="Media")
        st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        st.write(f"""
        En ambos casos, las probabilidades de que la media se aleje del promedio ({media:.2f}) son:
        - Probabilidad de ser mayor a {valor1:.2f}: {prob_mayor*100:.2f}%
        - Probabilidad de ser menor a {valor2:.2f}: {prob_menor*100:.2f}%
        
        Esto refleja el comportamiento de la variable {variable} en el centro de recreaci√≥n, 
        mostrando qu√© tan probable es obtener valores alejados de la media en futuras muestras.
        """)

    # b) Media con Varianza Desconocida (t-Student)
    with dist_tabs[1]:
        st.subheader("b) Distribuci√≥n Muestral para la Media con Varianza Desconocida")
        
        # Selecci√≥n de variable
        variable = st.selectbox(
            "Seleccione la variable num√©rica a analizar:",
            ["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
            key="var_t"
        )
        
        # Diccionario de configuraci√≥n por variable
        config_variables = {
            "Edad": {
                "unidad": "a√±os",
                "periodo": "persona",
                "factor_variabilidad": "las caracter√≠sticas demogr√°ficas de los visitantes"
            },
            "Frecuencia_Visitas": {
                "unidad": "personas",
                "periodo": "d√≠a",
                "factor_variabilidad": "las condiciones de acceso y la oferta de servicios"
            },
            "Satisfaccion": {
                "unidad": "puntos",
                "periodo": "evaluaci√≥n",
                "descripcion": "las experiencias individuales y servicios ofrecidos"
            },
            "Preferencia": {
                "unidad": "puntos",
                "periodo": "evaluaci√≥n",
                "factor_variabilidad": "los gustos individuales y opciones disponibles"
            }
        }
        
        # Verificar datos antes de procesar
        st.write("### Verificaci√≥n de Grupos")
        datos_variable = df[variable].dropna()
        n = len(datos_variable)
        
        if n < 2:
            st.error(f"""
            ‚ö†Ô∏è Error: No hay suficientes datos v√°lidos para la variable {variable}.
            Se necesitan al menos 2 observaciones para calcular la desviaci√≥n est√°ndar.
            """)
            st.stop()
        
        # Calcular estad√≠sticos reales
        media = datos_variable.mean()
        std = datos_variable.std()
        gl = n - 1  # Grados de libertad
        
        # Mostrar informaci√≥n de la muestra
        st.write(f"""
        ### Informaci√≥n de la Muestra
        
        Analizando la variable **{variable}**:
        - N√∫mero de participantes (n) = {n}
        - Grados de libertad (gl) = {gl}
        - Media muestral (xÃÑ) = {media:.2f}
        - Desviaci√≥n est√°ndar muestral (s) = {std:.2f}
        """)
        
        # Generar contexto autom√°tico
        st.write("### Contexto del An√°lisis")
        contexto = f"""Se sabe que, en promedio, {variable.lower().replace('_', ' ')} es de {media:.1f} {config_variables[variable]['unidad']} por {config_variables[variable]['periodo']}. 
        Debido a la variabilidad en {config_variables[variable]['factor_variabilidad']}, no se conoce con precisi√≥n la desviaci√≥n est√°ndar.
        Sin embargo, una muestra aleatoria de {n} {config_variables[variable]['periodo']}s revel√≥ una desviaci√≥n est√°ndar de {std:.1f} {config_variables[variable]['unidad']}."""
        
        st.write(contexto)
        
        # F√≥rmula principal con bot√≥n de copiar
        st.write("### F√≥rmula:")
        latex_copyable(r"t = \frac{\bar{X} - \mu_0}{s/\sqrt{n}}", "t_formula")
        
        # Explicaci√≥n
        st.write("""
        Donde:
        - xÃÑ = Media muestral
        - Œº‚ÇÄ = Media poblacional hipot√©tica
        - s = Desviaci√≥n est√°ndar muestral
        - n = Tama√±o de la muestra
        """)
        
        # Valores a analizar
        st.write("### An√°lisis de Probabilidades")
        valor = st.number_input(
            "Valor de referencia para Œº‚ÇÄ:",
            value=float(media),
            step=0.1,
            key="t_valor"
        )
        
        # C√°lculo del estad√≠stico t
        t_stat = (media - valor)/(std/np.sqrt(n))
        
        # Valores cr√≠ticos
        t_crit_left = stats.t.ppf(0.025, gl)  # Punto cr√≠tico izquierdo (2.5%)
        t_crit_right = stats.t.ppf(0.975, gl)  # Punto cr√≠tico derecho (97.5%)
        
        # Probabilidades
        p_mayor = 1 - stats.t.cdf(t_stat, gl)
        p_menor = stats.t.cdf(t_stat, gl)
        p_bilateral = 2 * min(p_mayor, p_menor)
        
        # Mostrar resultados
        st.write("### Resultados")
        
        # F√≥rmula del c√°lculo
        latex_copyable(
            rf"t = \frac{{{media:.2f} - {valor}}}{{{std:.2f}/\sqrt{{{n}}}}} = {t_stat:.4f}",
            "t_calc"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"""
            #### Probabilidades:
            - P(diferencia > {valor}) = {p_mayor:.4f}
            - P(diferencia < {valor}) = {p_menor:.4f}
            - P(bilateral) = {p_bilateral:.4f}
            
            #### Valores Cr√≠ticos (Œ± = 0.05):
            - t‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé = {t_crit_left:.4f}
            - t‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé = {t_crit_right:.4f}
            """)
        
        with col2:
            # Visualizaci√≥n
            x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 100)
            y = stats.t.pdf(x, gl)
            
            # Crear figura
            fig = px.line(x=x, y=y)
            
            # Agregar l√≠nea vertical para el estad√≠stico t calculado
            fig.add_vline(x=t_stat, line_dash="dash", line_color="red",
                         annotation_text="t calculado",
                         annotation_position="top")
            
            # Agregar l√≠neas verticales para los puntos cr√≠ticos
            fig.add_vline(x=t_crit_left, line_dash="dash", line_color="green",
                         annotation_text="t‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé",
                         annotation_position="bottom")
            fig.add_vline(x=t_crit_right, line_dash="dash", line_color="green",
                         annotation_text="t‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé",
                         annotation_position="bottom")
            
            # Agregar √°rea sombreada para regi√≥n cr√≠tica
            fig.add_scatter(x=x[x <= t_crit_left], y=y[x <= t_crit_left],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=True)
            fig.add_scatter(x=x[x >= t_crit_right], y=y[x >= t_crit_right],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=False)
            
            # Actualizar layout
            fig.update_layout(
                title="Distribuci√≥n t-Student",
                xaxis_title="t",
                yaxis_title="Densidad",
                showlegend=True
            )
            st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        if abs(t_stat) > abs(t_crit_right):
            interpretacion = f"""
            El valor del estad√≠stico t ({t_stat:.4f}) cae en la regi√≥n cr√≠tica 
            (|t| > {abs(t_crit_right):.4f}), lo que sugiere que hay evidencia estad√≠stica 
            significativa de que la media poblacional es diferente del valor de referencia 
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media-valor:.4f}) es estad√≠sticamente significativa.
            """
        else:
            interpretacion = f"""
            El valor del estad√≠stico t ({t_stat:.4f}) no cae en la regi√≥n cr√≠tica 
            (|t| ‚â§ {abs(t_crit_right):.4f}), lo que sugiere que no hay evidencia estad√≠stica 
            significativa de que la media poblacional sea diferente del valor de referencia 
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media-valor:.4f}) no es estad√≠sticamente significativa.
            """
        
        st.write(interpretacion)
        
        # Paso a paso
        with st.expander("Ver desarrollo paso a paso"):
            st.write("""
            1. **Identificaci√≥n del problema**
               - Variable cuantitativa
               - Varianza poblacional desconocida
               - Se usa distribuci√≥n t-Student
            
            2. **C√°lculo de estad√≠sticos muestrales**
               - Media muestral (xÃÑ)
               - Desviaci√≥n est√°ndar muestral (s)
               - Tama√±o de muestra (n)
               - Grados de libertad (gl = n-1)
            
            3. **C√°lculo del estad√≠stico t**
               - Diferencia de medias observada
               - Error est√°ndar de la diferencia
               - Comparaci√≥n con valores cr√≠ticos
            
            4. **Interpretaci√≥n**
               - An√°lisis de regi√≥n cr√≠tica
               - C√°lculo de probabilidades
               - Conclusi√≥n sobre la significancia estad√≠stica
            """)

    # c) Diferencia de Medias (Varianza Conocida)
    with dist_tabs[2]:
        st.subheader("c) Distribuci√≥n Muestral para la Diferencia de Medias (Varianza Conocida)")
        
        # Selecci√≥n de variables
        col1, col2 = st.columns(2)
        with col1:
            # Variable a analizar
            variable = st.selectbox(
                "Seleccione la variable num√©rica a analizar:",
                ["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
                key="var_diff"
            )
            
        with col2:
            # Variable de agrupaci√≥n
            grupo = st.selectbox(
                "Seleccione la variable para agrupar:",
                ["Genero", "Importancia_Costo"],
                key="grupo_diff"
            )
        
        # Verificar datos antes de procesar
        st.write("### Verificaci√≥n de Grupos")
        grupo_counts = df[grupo].value_counts().sort_index()
        st.write(f"Distribuci√≥n de {grupo}:")
        st.write(grupo_counts)
        
        # Permitir seleccionar los grupos a comparar
        col1, col2 = st.columns(2)
        with col1:
            grupo_valor1 = st.selectbox(
                "Seleccione el primer grupo:",
                sorted(df[grupo].unique()),
                key="grupo1"
            )
        with col2:
            grupo_valor2 = st.selectbox(
                "Seleccione el segundo grupo:",
                [x for x in sorted(df[grupo].unique()) if x != grupo_valor1],
                key="grupo2"
            )
        
        # Obtener grupos y verificar tama√±os
        grupo1_data = df[df[grupo] == grupo_valor1][variable]
        grupo2_data = df[df[grupo] == grupo_valor2][variable]
        
        # Calcular estad√≠sticos
        n1 = len(grupo1_data)
        n2 = len(grupo2_data)
        media1 = grupo1_data.mean()
        media2 = grupo2_data.mean()
        var1 = grupo1_data.var()
        var2 = grupo2_data.var()
        
        # Diccionario de configuraci√≥n por variable
        config_variables = {
            "Edad": {
                "unidad": "a√±os",
                "periodo": "mes",
                "descripcion": "la edad promedio"
            },
            "Frecuencia_Visitas": {
                "unidad": "visitas",
                "periodo": "mes",
                "descripcion": "el n√∫mero medio de visitas"
            },
            "Satisfaccion": {
                "unidad": "puntos",
                "periodo": "mes",
                "descripcion": "el nivel medio de satisfacci√≥n"
            },
            "Preferencia": {
                "unidad": "puntos",
                "periodo": "mes",
                "descripcion": "el nivel medio de preferencia"
            }
        }
        
        # Mostrar informaci√≥n de la muestra
        st.write(f"""
        ### Informaci√≥n de la Muestra
        
        Total de registros en la encuesta: **{len(df)}**
        
        La variable **{variable}** est√° siendo comparada entre dos grupos seg√∫n **{grupo}**:
        """)
        
        # Mostrar advertencia si hay problemas con los grupos
        if n1 < 2 or n2 < 2:
            st.error(f"""
            ‚ö†Ô∏è Error: Uno o ambos grupos tienen muy pocas observaciones:
            - Grupo 1 ({grupo_valor1}): {n1} observaciones
            - Grupo 2 ({grupo_valor2}): {n2} observaciones
            
            Se necesitan al menos 2 observaciones por grupo para calcular la desviaci√≥n est√°ndar.
            """)
            st.stop()
        
        # Planteamiento del problema
        st.write(f"""
        ### Planteamiento
        
        **Grupo 1 ({grupo_valor1}):**
        - Media (xÃÑ‚ÇÅ) = {media1:.2f}
        - Varianza (œÉ‚ÇÅ¬≤) = {var1:.2f}
        - Tama√±o (n‚ÇÅ) = {n1}
        
        **Grupo 2 ({grupo_valor2}):**
        - Media (xÃÑ‚ÇÇ) = {media2:.2f}
        - Varianza (œÉ‚ÇÇ¬≤) = {var2:.2f}
        - Tama√±o (n‚ÇÇ) = {n2}
        """)
        
        # F√≥rmula principal con bot√≥n de copiar
        st.write("### F√≥rmula:")
        latex_copyable(r"Z = \frac{(\bar{X}_1 - \bar{X}_2) - (\mu_1 - \mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}}}", "z_formula")
        
        st.write("""
        Donde:
        - xÃÑ‚ÇÅ, xÃÑ‚ÇÇ = Medias muestrales
        - Œº‚ÇÅ, Œº‚ÇÇ = Medias poblacionales
        - œÉ‚ÇÅ¬≤, œÉ‚ÇÇ¬≤ = Varianzas poblacionales
        - n‚ÇÅ, n‚ÇÇ = Tama√±os de muestra
        """)
        
        # Valores a analizar
        st.write("### An√°lisis de Probabilidades")
        diff_ref = st.number_input(
            "Diferencia de referencia (Œº‚ÇÅ - Œº‚ÇÇ):",
            value=0.0,
            step=0.1,
            key="diff_ref"
        )
        
        # Generar contexto autom√°tico
        contexto = f"""{config_variables[variable]['descripcion'].capitalize()} a los centros recreativos por personas del grupo {grupo_valor1} 
        es de {media1:.1f} {config_variables[variable]['unidad']} por {config_variables[variable]['periodo']}, 
        con una varianza de {var1:.1f}. Por otro lado, {config_variables[variable]['descripcion']} por personas del grupo {grupo_valor2} 
        es de {media2:.1f} {config_variables[variable]['unidad']} por {config_variables[variable]['periodo']}, 
        con una varianza de {var2:.1f}.

        Si tomamos una muestra aleatoria de {n1} personas del grupo {grupo_valor1} y {n2} personas del grupo {grupo_valor2}, 
        ¬øcu√°l es la probabilidad de que {config_variables[variable]['descripcion']} del grupo {grupo_valor1} sea al menos 
        {diff_ref:.1f} {config_variables[variable]['unidad']} mayor que {config_variables[variable]['descripcion']} del grupo {grupo_valor2}?"""
        
        st.write(contexto)
        
        # C√°lculo del estad√≠stico Z
        z_stat = ((media1 - media2) - diff_ref) / np.sqrt((var1/n1) + (var2/n2))
        
        # Valores cr√≠ticos
        z_crit_left = stats.norm.ppf(0.025)
        z_crit_right = stats.norm.ppf(0.975)
        
        # Probabilidades
        p_mayor = 1 - stats.norm.cdf(z_stat)
        p_menor = stats.norm.cdf(z_stat)
        p_bilateral = 2 * min(p_mayor, p_menor)
        
        # Mostrar resultados
        st.write("### Resultados")
        
        # F√≥rmula del c√°lculo
        latex_copyable(
            rf"Z = \frac{{({media1:.2f} - {media2:.2f}) - {diff_ref}}}{{\sqrt{{\frac{{{var1:.2f}}}{{{n1}}} + \frac{{{var2:.2f}}}{{{n2}}}}}}} = {z_stat:.4f}",
            "z_calc"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"""
            #### Probabilidades:
            - P(diferencia > {diff_ref}) = {p_mayor:.4f}
            - P(diferencia < {diff_ref}) = {p_menor:.4f}
            - P(bilateral) = {p_bilateral:.4f}
            
            #### Valores Cr√≠ticos (Œ± = 0.05):
            - Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé = {z_crit_left:.4f}
            - Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé = {z_crit_right:.4f}
            """)
        
        with col2:
            # Visualizaci√≥n
            x = np.linspace(-4, 4, 100)
            y = stats.norm.pdf(x)
            
            # Crear figura
            fig = px.line(x=x, y=y)
            
            # Agregar l√≠nea vertical para el estad√≠stico Z calculado
            fig.add_vline(x=z_stat, line_dash="dash", line_color="red",
                         annotation_text="Z calculado",
                         annotation_position="top")
            
            # Agregar l√≠neas verticales para los puntos cr√≠ticos
            fig.add_vline(x=z_crit_left, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé",
                         annotation_position="bottom")
            fig.add_vline(x=z_crit_right, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé",
                         annotation_position="bottom")
            
            # Agregar √°rea sombreada para regi√≥n cr√≠tica
            fig.add_scatter(x=x[x <= z_crit_left], y=y[x <= z_crit_left],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=True)
            fig.add_scatter(x=x[x >= z_crit_right], y=y[x >= z_crit_right],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=False)
            
            # Actualizar layout
            fig.update_layout(
                title="Distribuci√≥n Normal Est√°ndar",
                xaxis_title="Z",
                yaxis_title="Densidad",
                showlegend=True
            )
            st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        if abs(z_stat) > abs(z_crit_right):
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) cae en la regi√≥n cr√≠tica 
            (|Z| > {abs(z_crit_right):.4f}), lo que sugiere que hay evidencia estad√≠stica 
            significativa de que existe una diferencia entre las medias poblacionales de los dos grupos
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media1-media2:.4f}) es estad√≠sticamente significativa.
            """
        else:
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) no cae en la regi√≥n cr√≠tica 
            (|Z| ‚â§ {abs(z_crit_right):.4f}), lo que sugiere que no hay evidencia estad√≠stica 
            significativa de que exista una diferencia entre las medias poblacionales de los dos grupos
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media1-media2:.4f}) no es estad√≠sticamente significativa.
            """
        
        st.write(interpretacion)
        
        # Paso a paso
        with st.expander("Ver desarrollo paso a paso"):
            st.write("""
            1. **Identificaci√≥n del problema**
               - Comparaci√≥n de dos grupos independientes
               - Variable cuantitativa
               - Varianzas poblacionales conocidas
            
            2. **C√°lculo de estad√≠sticos por grupo**
               - Medias muestrales
               - Desviaciones est√°ndar
               - Tama√±os de muestra
            
            3. **C√°lculo del estad√≠stico Z**
               - Diferencia de medias observada
               - Error est√°ndar de la diferencia
               - Comparaci√≥n con valores cr√≠ticos
            
            4. **Interpretaci√≥n**
               - An√°lisis de regi√≥n cr√≠tica
               - C√°lculo de probabilidades
               - Conclusi√≥n sobre la significancia estad√≠stica
            """)

    # f) Proporci√≥n
    with dist_tabs[5]:
        st.write("## f) Distribuci√≥n Muestral para Proporciones")
        
        st.write("""
        Esta secci√≥n permite analizar la distribuci√≥n muestral de proporciones. 
        Es √∫til cuando queremos hacer inferencias sobre proporciones poblacionales basadas en datos muestrales.
        """)
        
        # Entrada de datos
        col1, col2 = st.columns(2)
        
        # Calcular valores por defecto basados en datos reales
        satisfaccion_alta = 4  # Definimos satisfacci√≥n alta como ‚â•4
        total_satisfechos = sum(df['Satisfaccion'] >= satisfaccion_alta)
        total_visitantes = len(df)
        
        with col1:
            # Proporci√≥n poblacional
            num_exitos = st.number_input(
                "N√∫mero de visitantes satisfechos (‚â•4):",
                min_value=0,
                value=total_satisfechos,
                step=1,
                key="num_exitos"
            )
            tam_poblacion = st.number_input(
                "Total de visitantes:",
                min_value=1,
                value=total_visitantes,
                step=1,
                key="tam_poblacion"
            )
            
        with col2:
            # Tama√±o de muestra
            n = st.number_input(
                "Tama√±o de la muestra:",
                min_value=1,
                value=min(50, total_visitantes),  # Usar 50 o el total si es menor
                step=1,
                key="tam_muestra_prop"
            )
            # Proporci√≥n de referencia
            proporcion_actual = total_satisfechos / total_visitantes
            p_ref = st.number_input(
                "Proporci√≥n de referencia:",
                min_value=0.0,
                max_value=1.0,
                value=round(proporcion_actual, 2),  # Redondear a 2 decimales
                step=0.01,
                key="prop_ref"
            )
        
        # C√°lculos b√°sicos
        pi = num_exitos / tam_poblacion
        q = 1 - pi
        
        # Verificar condiciones
        if n <= 0:
            st.error("El tama√±o de la muestra debe ser mayor que 0")
            st.stop()
        if pi <= 0 or pi >= 1:
            st.error("La proporci√≥n poblacional debe estar entre 0 y 1")
            st.stop()
            
        # Mostrar informaci√≥n b√°sica
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        **Datos de la Poblaci√≥n:**
        - N√∫mero de √©xitos: {num_exitos}
        - Tama√±o de la poblaci√≥n: {tam_poblacion}
        - Proporci√≥n poblacional (œÄ): {pi:.4f}
        - Complemento (1-œÄ): {q:.4f}
        
        **Datos de la Muestra:**
        - Tama√±o de muestra (n): {n}
        - Proporci√≥n de referencia: {p_ref:.4f}
        """)
        
        # Generar contexto autom√°tico
        contexto = f"""Se tiene conocimiento que {num_exitos} de {tam_poblacion} visitantes est√°n satisfechos 
        con las instalaciones del centro recreativo. Se recopila una muestra de {n} visitantes. 
        Calcular la probabilidad de que la proporci√≥n de visitantes satisfechos con las instalaciones 
        sea mayor al {p_ref:.1%}."""
        
        st.write(contexto)
        
        # F√≥rmula principal
        st.write("### F√≥rmula:")
        latex_copyable(r"Z = \frac{\hat{p} - \pi}{\sqrt{\frac{\pi(1-\pi)}{n}}}", "z_prop_formula")
        
        st.write("""
        Donde:
        - œÄ = Proporci√≥n poblacional
        - pÃÇ = Proporci√≥n muestral de referencia
        - n = Tama√±o de la muestra
        """)
        
        # C√°lculos
        error_std = np.sqrt((pi * q) / n)
        z_stat = (p_ref - pi) / error_std
        
        # Probabilidades
        p_mayor = 1 - stats.norm.cdf(z_stat)
        p_menor = stats.norm.cdf(z_stat)
        p_bilateral = 2 * min(p_mayor, p_menor)
        
        # Valores cr√≠ticos
        z_crit_left = stats.norm.ppf(0.025)
        z_crit_right = stats.norm.ppf(0.975)
        
        # Mostrar resultados
        st.write("### Resultados")
        
        # F√≥rmula del c√°lculo
        latex_copyable(
            rf"Z = \frac{{{p_ref:.4f} - {pi:.4f}}}{{\sqrt{{\frac{{{pi:.4f}(1-{pi:.4f})}}{{{n}}}}}}} = {z_stat:.4f}",
            "z_calc_prop"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"""
            #### Probabilidades:
            - P(pÃÇ > {p_ref}) = {p_mayor:.4f}
            - P(pÃÇ < {p_ref}) = {p_menor:.4f}
            - P(bilateral) = {p_bilateral:.4f}
            
            #### Valores Cr√≠ticos (Œ± = 0.05):
            - Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé = {z_crit_left:.4f}
            - Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé = {z_crit_right:.4f}
            """)
        
        with col2:
            # Visualizaci√≥n
            x = np.linspace(-4, 4, 100)
            y = stats.norm.pdf(x)
            
            # Crear figura
            fig = px.line(x=x, y=y)
            
            # Agregar l√≠nea vertical para el estad√≠stico Z calculado
            fig.add_vline(x=z_stat, line_dash="dash", line_color="red",
                         annotation_text="Z calculado",
                         annotation_position="top")
            
            # Agregar l√≠neas verticales para los puntos cr√≠ticos
            fig.add_vline(x=z_crit_left, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé",
                         annotation_position="bottom")
            fig.add_vline(x=z_crit_right, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé",
                         annotation_position="bottom")
            
            # Agregar √°rea sombreada para regi√≥n cr√≠tica
            fig.add_scatter(x=x[x <= z_crit_left], y=y[x <= z_crit_left],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=True)
            fig.add_scatter(x=x[x >= z_crit_right], y=y[x >= z_crit_right],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=False)
            
            # Actualizar layout
            fig.update_layout(
                title="Distribuci√≥n Normal Est√°ndar",
                xaxis_title="Z",
                yaxis_title="Densidad",
                showlegend=True
            )
            st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        if abs(z_stat) > abs(z_crit_right):
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) cae en la regi√≥n cr√≠tica 
            (|Z| > {abs(z_crit_right):.4f}), lo que sugiere que hay evidencia estad√≠stica 
            significativa de que la proporci√≥n poblacional es diferente de {p_ref:.4f}
            con un nivel de significancia de 0.05.
            
            La probabilidad de observar una proporci√≥n mayor que {p_ref:.4f} es {p_mayor:.4f} ({p_mayor*100:.1f}%).
            """
        else:
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) no cae en la regi√≥n cr√≠tica 
            (|Z| ‚â§ {abs(z_crit_right):.4f}), lo que sugiere que no hay evidencia estad√≠stica 
            significativa de que la proporci√≥n poblacional sea diferente de {p_ref:.4f}
            con un nivel de significancia de 0.05.
            
            La probabilidad de observar una proporci√≥n mayor que {p_ref:.4f} es {p_mayor:.4f} ({p_mayor*100:.1f}%).
            """
        
        st.write(interpretacion)

    # g) Diferencia de Proporciones
    with dist_tabs[6]:
        st.write("## g) Distribuci√≥n Muestral para Diferencia de Proporciones")
        
        st.write("""
        Esta secci√≥n analiza la diferencia entre las proporciones de satisfacci√≥n alta (‚â•4) entre hombres y mujeres.
        """)
        
        # Calcular proporciones y tama√±os de muestra por g√©nero
        satisfaccion_alta = 4  # Definimos satisfacci√≥n alta como ‚â•4
        
        # Grupo 1: Masculino (G√©nero = 1)
        grupo1 = df[df['Genero'] == 1]
        n1 = len(grupo1)
        satisfechos1 = sum(grupo1['Satisfaccion'] >= satisfaccion_alta)
        p1 = satisfechos1 / n1
        
        # Grupo 2: Femenino (G√©nero = 2)
        grupo2 = df[df['Genero'] == 2]
        n2 = len(grupo2)
        satisfechos2 = sum(grupo2['Satisfaccion'] >= satisfaccion_alta)
        p2 = satisfechos2 / n2
            
        # Mostrar informaci√≥n b√°sica
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        **Grupo 1 (Masculino):**
        - Proporci√≥n (p‚ÇÅ): {p1:.4f}
        - Tama√±o de muestra (n‚ÇÅ): {n1}
        - Complemento (1-p‚ÇÅ): {1-p1:.4f}
        
        **Grupo 2 (Femenino):**
        - Proporci√≥n (p‚ÇÇ): {p2:.4f}
        - Tama√±o de muestra (n‚ÇÇ): {n2}
        - Complemento (1-p‚ÇÇ): {1-p2:.4f}
        """)
        
        # Generar contexto autom√°tico
        st.write("### Contexto del An√°lisis")
        contexto = f"""En nuestro estudio de satisfacci√≥n del centro recreativo, 
        se analizaron las respuestas de {n1} hombres y {n2} mujeres. El porcentaje de personas que 
        expresan alta satisfacci√≥n (‚â•4) es del {p1:.1%} en hombres y {p2:.1%} en mujeres. Analizaremos 
        si existe una diferencia significativa entre estas proporciones."""
        st.write(contexto)
        
        # F√≥rmula principal
        st.write("### F√≥rmula:")
        latex_copyable(r"Z = \frac{(p_1 - p_2) - (\pi_1 - \pi_2)}{\sqrt{\frac{p_1(1-p_1)}{n_1} + \frac{p_2(1-p_2)}{n_2}}}", "z_prop_diff_formula")
        
        st.write("""
        Donde:
        - p‚ÇÅ, p‚ÇÇ = Proporciones muestrales de satisfacci√≥n alta
        - œÄ‚ÇÅ, œÄ‚ÇÇ = Proporciones poblacionales (asumimos œÄ‚ÇÅ = œÄ‚ÇÇ)
        - n‚ÇÅ, n‚ÇÇ = Tama√±os de muestra por g√©nero
        """)
        
        # C√°lculos
        error_std = np.sqrt((p1*(1-p1)/n1) + (p2*(1-p2)/n2))
        z_stat = (p1 - p2) / error_std
        
        # Probabilidades
        p_mayor = 1 - stats.norm.cdf(z_stat)
        p_menor = stats.norm.cdf(z_stat)
        p_bilateral = 2 * min(p_mayor, p_menor)
        
        # Valores cr√≠ticos
        z_crit_left = stats.norm.ppf(0.025)
        z_crit_right = stats.norm.ppf(0.975)
        
        # Mostrar resultados
        st.write("### Resultados")
        
        # F√≥rmula del c√°lculo
        latex_copyable(
            rf"Z = \frac{{{p1:.4f} - {p2:.4f}}}{{\sqrt{{\frac{{{p1:.4f}(1-{p1:.4f})}}{{{n1}}} + \frac{{{p2:.4f}(1-{p2:.4f})}}{{{n2}}}}}}} = {z_stat:.4f}",
            "z_calc_prop_diff"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"""
            #### Probabilidades:
            - P(p‚ÇÅ - p‚ÇÇ > 0) = {p_mayor:.4f}
            - P(p‚ÇÅ - p‚ÇÇ < 0) = {p_menor:.4f}
            - P(bilateral) = {p_bilateral:.4f}
            
            #### Valores Cr√≠ticos (Œ± = 0.05):
            - Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé = {z_crit_left:.4f}
            - Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé = {z_crit_right:.4f}
            """)
        
        with col2:
            # Visualizaci√≥n
            x = np.linspace(-4, 4, 100)
            y = stats.norm.pdf(x)
            
            # Crear figura
            fig = px.line(x=x, y=y)
            
            # Agregar l√≠nea vertical para el estad√≠stico Z calculado
            fig.add_vline(x=z_stat, line_dash="dash", line_color="red",
                         annotation_text="Z calculado",
                         annotation_position="top")
            
            # Agregar l√≠neas verticales para los puntos cr√≠ticos
            fig.add_vline(x=z_crit_left, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚ÇÄ‚ÇÇ‚ÇÖ‚Çé",
                         annotation_position="bottom")
            fig.add_vline(x=z_crit_right, line_dash="dash", line_color="green",
                         annotation_text="Z‚Çç‚ÇÄ.‚Çâ‚Çá‚ÇÖ‚Çé",
                         annotation_position="bottom")
            
            # Agregar √°rea sombreada para regi√≥n cr√≠tica
            fig.add_scatter(x=x[x <= z_crit_left], y=y[x <= z_crit_left],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=True)
            fig.add_scatter(x=x[x >= z_crit_right], y=y[x >= z_crit_right],
                          fill='tozeroy', fillcolor='rgba(255,0,0,0.2)',
                          line=dict(width=0), name='Regi√≥n cr√≠tica',
                          showlegend=False)
            
            # Actualizar layout
            fig.update_layout(
                title="Distribuci√≥n Normal Est√°ndar",
                xaxis_title="Z",
                yaxis_title="Densidad",
                showlegend=True
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        if abs(z_stat) > abs(z_crit_right):
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) cae en la regi√≥n cr√≠tica 
            (|Z| > {abs(z_crit_right):.4f}), lo que sugiere que hay evidencia estad√≠stica 
            significativa de que existe una diferencia entre las proporciones de satisfacci√≥n alta
            entre hombres y mujeres, con un nivel de significancia de 0.05.
            
            La probabilidad de que la proporci√≥n de satisfacci√≥n alta en hombres sea mayor que en mujeres 
            es {p_mayor:.4f} ({p_mayor*100:.1f}%).
            """
        else:
            interpretacion = f"""
            El valor del estad√≠stico Z ({z_stat:.4f}) no cae en la regi√≥n cr√≠tica 
            (|Z| ‚â§ {abs(z_crit_right):.4f}), lo que sugiere que no hay evidencia estad√≠stica 
            significativa de que exista una diferencia entre las proporciones de satisfacci√≥n alta
            entre hombres y mujeres, con un nivel de significancia de 0.05.
            
            La probabilidad de que la proporci√≥n de satisfacci√≥n alta en hombres sea mayor que en mujeres 
            es {p_mayor:.4f} ({p_mayor*100:.1f}%).
            """
        
        st.write(interpretacion)
        
with tab2:
    st.header("7. Intervalos de Confianza")
    
    # Crear tabs para cada tipo de intervalo
    conf_tabs = st.tabs([
        "a) Media (œÉ¬≤ conocida)",
        "b) Media (œÉ¬≤ desconocida)",
        "c) Diferencia de Medias (œÉ¬≤ conocida)",
        "f) Proporci√≥n",
        "g) Diferencia de Proporciones",
        "h) Varianza"
    ])
    
    # a) Intervalo para la media con varianza conocida
    with conf_tabs[0]:
        st.write("## 7.1 Intervalo de Confianza para la Media (Varianza Conocida)")
        
        # Inputs para el usuario
        col1, col2 = st.columns(2)
        
        with col1:
            # Selecci√≥n de variable
            var_ic_media = st.selectbox(
                "Seleccione la variable num√©rica",
                options=["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
                key="var_ic_media"
            )
            
            # Calcular estad√≠sticos de la variable seleccionada
            datos_var = df[var_ic_media]
            n_ic = len(datos_var)  # Tama√±o de muestra
            media_muestral = datos_var.mean()  # Media muestral
            
            # Input para la desviaci√≥n est√°ndar poblacional
            desv_est = st.number_input(
                "Desviaci√≥n est√°ndar poblacional (œÉ)",
                min_value=0.1,
                value=datos_var.std(),  # Valor sugerido: desviaci√≥n muestral
                step=0.1,
                key="desv_est_ic"
            )
            
            # Mostrar estad√≠sticos calculados
            st.write("### Estad√≠sticos Calculados:")
            st.write(f"""
            - Tama√±o de muestra (n): {n_ic}
            - Media muestral (xÃÑ): {media_muestral:.2f}
            """)
            
        with col2:
            # Nivel de confianza
            nivel_conf = st.slider(
                "Nivel de confianza",
                min_value=0.80,
                max_value=0.99,
                value=0.95,
                step=0.01,
                key="nivel_conf_ic_dist"
            )
        
        # C√°lculos
        alpha = 1 - nivel_conf
        z_value = stats.norm.ppf(1 - alpha/2)
        error_est = z_value * (desv_est / np.sqrt(n_ic))
        
        ic_lower = media_muestral - error_est
        ic_upper = media_muestral + error_est
        
        # Mostrar informaci√≥n del problema
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        **Datos de la Variable '{var_ic_media}':**
        - Desviaci√≥n est√°ndar poblacional (œÉ): {desv_est:.2f}
        - Tama√±o de muestra (n): {n_ic}
        - Media muestral (xÃÑ): {media_muestral:.2f}
        - Nivel de confianza: {nivel_conf:.0%}
        """)
        
        # Generar contexto autom√°tico
        contexto = f"""Se analiza la variable '{var_ic_media}' de la encuesta de recreaci√≥n. 
        A partir de una muestra de {n_ic} observaciones, se obtuvo una media muestral de {media_muestral:.2f} 
        y una desviaci√≥n est√°ndar poblacional de {desv_est:.2f}. Se desea construir un intervalo de confianza 
        al {nivel_conf:.0%} para la media poblacional."""
        st.write(contexto)
        
        # F√≥rmula
        st.write("### F√≥rmula:")
        latex_copyable(r"IC = \bar{x} \pm Z_{1-\frac{\alpha}{2}} \frac{\sigma}{\sqrt{n}}", "ic_media_formula")
        
        # Resoluci√≥n de la f√≥rmula
        st.write("### Resoluci√≥n de la F√≥rmula:")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {z_value:.4f} \\frac{{{desv_est:.4f}}}{{\sqrt{{{n_ic}}}}}", "ic_media_resolucion_1")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {z_value:.4f} \\times {desv_est/np.sqrt(n_ic):.4f}", "ic_media_resolucion_2")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {error_est:.4f}", "ic_media_resolucion_3")
        latex_copyable(f"IC = [{ic_lower:.4f}, {ic_upper:.4f}]", "ic_media_resolucion_4")

        # C√°lculos intermedios
        st.write("### C√°lculos:")
        st.write(f"""
        1. Valor cr√≠tico Z:
        - Œ± = {alpha:.3f}
        - Z‚Çç‚ÇÅ‚ÇãŒ±/‚ÇÇ‚Çé = {z_value:.4f}
        
        2. Error est√°ndar:
        - SE = {z_value:.4f} √ó ({desv_est:.2f}/‚àö{n_ic})
        - SE = {error_est:.4f}
        """)
        
        # Resultado del intervalo
        st.write("### Intervalo de Confianza:")
        st.write(f"IC = {media_muestral:.2f} ¬± {error_est:.2f}")
        st.write(f"IC = [{ic_lower:.2f}, {ic_upper:.2f}]")
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(media_muestral - 4*desv_est/np.sqrt(n_ic), 
                       media_muestral + 4*desv_est/np.sqrt(n_ic), 1000)
        y = stats.norm.pdf(x, media_muestral, desv_est/np.sqrt(n_ic))
        
        # Crear el gr√°fico con plotly
        fig = go.Figure()
        
        # Agregar la curva normal completa
        fig.add_trace(go.Scatter(x=x, y=y, 
                               name='Distribuci√≥n Normal',
                               line=dict(color='blue', width=2),
                               showlegend=True))
        
        # Agregar el √°rea del intervalo de confianza
        x_ic = np.linspace(ic_lower, ic_upper, 1000)
        y_ic = stats.norm.pdf(x_ic, media_muestral, desv_est/np.sqrt(n_ic))
        fig.add_trace(go.Scatter(x=x_ic, y=y_ic, 
                               fill='tozeroy', 
                               name=f'Intervalo de Confianza {nivel_conf:.0%}',
                               line=dict(color='green', width=0),
                               fillcolor='rgba(0, 255, 0, 0.3)',
                               showlegend=True))
        
        # Agregar l√≠neas verticales para los puntos cr√≠ticos
        for punto in [ic_lower, ic_upper]:
            fig.add_vline(x=punto, 
                         line_dash="dash", 
                         line_color="red",
                         annotation_text=f"{punto:.2f}",
                         annotation_position="top")
        
        # Agregar l√≠nea vertical para la media
        fig.add_vline(x=media_muestral,
                     line_color="green",
                     annotation_text=f"Media: {media_muestral:.2f}",
                     annotation_position="top")
        
        # Personalizar el dise√±o
        fig.update_layout(
            title=f'Intervalo de Confianza para la Media de {var_ic_media} ({nivel_conf:.0%})',
            xaxis_title=var_ic_media,
            yaxis_title='Densidad',
            showlegend=True,
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            annotations=[
                dict(x=media_muestral, y=max(y)*1.1,
                     text=f"IC: [{ic_lower:.2f}, {ic_upper:.2f}]",
                     showarrow=False)
            ]
        )
        
        st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        st.write(f"""Con un nivel de confianza del {nivel_conf:.0%}, se estima que la media poblacional 
        de la variable '{var_ic_media}' se encuentra entre {ic_lower:.2f} y {ic_upper:.2f}. 
        Esto significa que si tom√°ramos muchas muestras del mismo tama√±o, aproximadamente el {nivel_conf:.0%} 
        de los intervalos calculados contendr√≠an la verdadera media poblacional.""")

    # b) Intervalo para la media con varianza desconocida
    with conf_tabs[1]:
        st.write("## 7.2 Intervalo de Confianza para la Media (Varianza Desconocida)")
        
        # Inputs para el usuario
        col1, col2 = st.columns(2)
        with col1:
            # Selecci√≥n de variable
            var_ic_media_t = st.selectbox(
                "Seleccione la variable num√©rica",
                options=["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
                key="var_ic_media_t"
            )
            
            # Calcular estad√≠sticos de la variable seleccionada
            datos_var = df[var_ic_media_t]
            n_ic = len(datos_var)  # Tama√±o de muestra
            media_muestral = datos_var.mean()  # Media muestral
            desv_est_muestral = datos_var.std()  # Desviaci√≥n est√°ndar muestral
            grados_libertad = n_ic - 1  # Grados de libertad
            
            # Mostrar estad√≠sticos calculados
            st.write("### Estad√≠sticos Calculados:")
            st.write(f"""
            - Tama√±o de muestra (n): {n_ic}
            - Media muestral (xÃÑ): {media_muestral:.2f}
            - Desviaci√≥n est√°ndar muestral (s): {desv_est_muestral:.2f}
            - Grados de libertad (n-1): {grados_libertad}
            """)
            
        with col2:
            # Nivel de confianza
            nivel_conf = st.slider(
                "Nivel de confianza",
                min_value=0.80,
                max_value=0.99,
                value=0.95,
                step=0.01,
                key="nivel_conf_ic_t_dist"
            )
        
        # C√°lculos
        alpha = 1 - nivel_conf
        t_value = stats.t.ppf(1 - alpha/2, grados_libertad)  # Valor t de Student
        error_est = t_value * (desv_est_muestral / np.sqrt(n_ic))
        
        ic_lower = media_muestral - error_est
        ic_upper = media_muestral + error_est
        
        # Mostrar informaci√≥n del problema
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        **Datos de la Variable '{var_ic_media_t}':**
        - Tama√±o de muestra (n): {n_ic}
        - Media muestral (xÃÑ): {media_muestral:.2f}
        - Desviaci√≥n est√°ndar muestral (s): {desv_est_muestral:.2f}
        - Nivel de confianza: {nivel_conf:.0%}
        - Valor t‚Çç{grados_libertad}‚Çé: {t_value:.4f}
        """)
        
        # Generar contexto autom√°tico
        st.write("### Contexto del An√°lisis")
        contexto = f"""Se analiza la variable '{var_ic_media_t}' de la encuesta de recreaci√≥n. 
        A partir de una muestra de {n_ic} observaciones, se obtuvo una media muestral de {media_muestral:.2f} 
        y una desviaci√≥n est√°ndar muestral de {desv_est_muestral:.2f}. Como la varianza poblacional es desconocida, 
        se utiliza la distribuci√≥n t de Student con {grados_libertad} grados de libertad para construir un 
        intervalo de confianza al {nivel_conf:.0%} para la media poblacional."""
        st.write(contexto)
        
        # F√≥rmula
        st.write("### F√≥rmula:")
        latex_copyable(r"IC = \bar{x} \pm t_{n-1,1-\frac{\alpha}{2}} \frac{s}{\sqrt{n}}", "ic_media_t_formula")
        
        # Resoluci√≥n de la f√≥rmula
        st.write("### Resoluci√≥n de la F√≥rmula:")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {t_value:.4f} \\frac{{{desv_est_muestral:.4f}}}{{\sqrt{{{n_ic}}}}}", "ic_media_t_resolucion_1")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {t_value:.4f} \\times {desv_est_muestral/np.sqrt(n_ic):.4f}", "ic_media_t_resolucion_2")
        latex_copyable(f"IC = {media_muestral:.4f} \pm {error_est:.4f}", "ic_media_t_resolucion_3")
        latex_copyable(f"IC = [{ic_lower:.4f}, {ic_upper:.4f}]", "ic_media_t_resolucion_4")

        # C√°lculos intermedios
        st.write("### C√°lculos:")
        st.write(f"""
        1. Valor cr√≠tico t:
        - Œ± = {alpha:.3f}
        - t‚Çç{grados_libertad}‚Çé = {t_value:.4f}
        
        2. Error est√°ndar:
        - SE = {t_value:.4f} √ó ({desv_est_muestral:.2f}/‚àö{n_ic})
        - SE = {error_est:.4f}
        """)
        
        # Resultado del intervalo
        st.write("### Intervalo de Confianza:")
        st.write(f"IC = {media_muestral:.2f} ¬± {error_est:.2f}")
        st.write(f"IC = [{ic_lower:.2f}, {ic_upper:.2f}]")
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n t
        x = np.linspace(media_muestral - 4*desv_est_muestral/np.sqrt(n_ic), 
                       media_muestral + 4*desv_est_muestral/np.sqrt(n_ic), 1000)
        y = stats.t.pdf(x, grados_libertad, loc=media_muestral, 
                       scale=desv_est_muestral/np.sqrt(n_ic))
        
        # Crear el gr√°fico con plotly
        fig = go.Figure()
        
        # Agregar la curva t de Student
        fig.add_trace(go.Scatter(x=x, y=y, 
                               name='Distribuci√≥n t-Student',
                               line=dict(color='blue', width=2),
                               showlegend=True))
        
        # Agregar el √°rea del intervalo de confianza
        x_ic = np.linspace(ic_lower, ic_upper, 1000)
        y_ic = stats.t.pdf(x_ic, grados_libertad, loc=media_muestral, 
                          scale=desv_est_muestral/np.sqrt(n_ic))
        fig.add_trace(go.Scatter(x=x_ic, y=y_ic, 
                               fill='tozeroy', 
                               name=f'Intervalo de Confianza {nivel_conf:.0%}',
                               line=dict(color='green', width=0),
                               fillcolor='rgba(0, 255, 0, 0.3)',
                               showlegend=True))
        
        # Agregar l√≠neas verticales para los puntos cr√≠ticos
        for punto in [ic_lower, ic_upper]:
            fig.add_vline(x=punto, 
                         line_dash="dash", 
                         line_color="red",
                         annotation_text=f"{punto:.2f}",
                         annotation_position="top")
        
        # Agregar l√≠nea vertical para la media
        fig.add_vline(x=media_muestral,
                     line_color="green",
                     annotation_text=f"Media: {media_muestral:.2f}",
                     annotation_position="top")
        
        # Personalizar el dise√±o
        fig.update_layout(
            title=f'Intervalo de Confianza para la Media de {var_ic_media_t} ({nivel_conf:.0%})',
            xaxis_title=var_ic_media_t,
            yaxis_title='Densidad',
            showlegend=True,
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            annotations=[
                dict(x=media_muestral, y=max(y)*1.1,
                     text=f"IC: [{ic_lower:.2f}, {ic_upper:.2f}]",
                     showarrow=False)
            ]
        )
        
        st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        if abs(t_value) > abs(stats.t.ppf(0.975, grados_libertad)):
            interpretacion = f"""
            El valor del estad√≠stico t ({t_value:.4f}) cae en la regi√≥n cr√≠tica 
            (|t| > {abs(stats.t.ppf(0.975, grados_libertad)):.4f}), lo que sugiere que hay evidencia estad√≠stica 
            significativa de que la media poblacional es diferente del valor de referencia 
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media_muestral:.4f}) es estad√≠sticamente significativa.
            """
        else:
            interpretacion = f"""
            El valor del estad√≠stico t ({t_value:.4f}) no cae en la regi√≥n cr√≠tica 
            (|t| ‚â§ {abs(stats.t.ppf(0.975, grados_libertad)):.4f}), lo que sugiere que no hay evidencia estad√≠stica 
            significativa de que la media poblacional sea diferente del valor de referencia 
            con un nivel de significancia de 0.05.
            
            La diferencia observada ({media_muestral:.4f}) no es estad√≠sticamente significativa.
            """
        
        st.write(interpretacion)

    # c) Intervalo para la diferencia de medias con varianza conocida
    with conf_tabs[2]:
        st.write("## 7.3 Intervalo de Confianza para la Diferencia de Medias (Varianza Conocida)")
        
        # Inputs para el usuario
        col1, col2 = st.columns(2)
        
        with col1:
            # Selecci√≥n de variable num√©rica
            var_ic_diff = st.selectbox(
                "Seleccione la variable num√©rica",
                options=["Edad", "Frecuencia_Visitas", "Satisfaccion", "Preferencia"],
                key="var_ic_diff"
            )
            
            # Selecci√≥n de variable para grupos
            var_grupo = st.selectbox(
                "Seleccione la variable para grupos",
                options=["Genero", "Importancia_Costo"],
                key="var_grupo_ic_diff"
            )
        
        with col2:
            # Inputs para las varianzas poblacionales
            sigma1 = st.number_input(
                f"Desviaci√≥n est√°ndar poblacional de {var_grupo} 1 (œÉ‚ÇÅ)",
                min_value=0.1,
                value=df[df[var_grupo] == df[var_grupo].unique()[0]][var_ic_diff].std(),
                step=0.1,
                key="sigma1_ic_diff"
            )
            
            sigma2 = st.number_input(
                f"Desviaci√≥n est√°ndar poblacional de {var_grupo} 2 (œÉ‚ÇÇ)",
                min_value=0.1,
                value=df[df[var_grupo] == df[var_grupo].unique()[1]][var_ic_diff].std(),
                step=0.1,
                key="sigma2_ic_diff"
            )
            
            # Nivel de confianza
            nivel_conf = st.slider(
                "Nivel de confianza",
                min_value=0.80,
                max_value=0.99,
                value=0.95,
                step=0.01,
                key="nivel_conf_ic_diff_dist"
            )
    
        # C√°lculos para cada grupo
        datos1 = df[df[var_grupo] == df[var_grupo].unique()[0]][var_ic_diff]
        datos2 = df[df[var_grupo] == df[var_grupo].unique()[1]][var_ic_diff]
        
        n1 = len(datos1)
        n2 = len(datos2)
        media1 = datos1.mean()
        media2 = datos2.mean()
        diff_medias = media1 - media2
        
        # C√°lculos del intervalo
        alpha = 1 - nivel_conf
        z_value = stats.norm.ppf(1 - alpha/2)
        error_est = z_value * np.sqrt((sigma1**2/n1) + (sigma2**2/n2))
        
        ic_lower = diff_medias - error_est
        ic_upper = diff_medias + error_est
        
        # Mostrar informaci√≥n del problema
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        **Grupo 1 ({var_grupo} 1):**
        - Tama√±o de muestra (n‚ÇÅ): {n1}
        - Media muestral (xÃÑ‚ÇÅ): {media1:.2f}
        - Desviaci√≥n est√°ndar poblacional (œÉ‚ÇÅ): {sigma1:.2f}
        
        **Grupo 2 ({var_grupo} 2):**
        - Tama√±o de muestra (n‚ÇÇ): {n2}
        - Media muestral (xÃÑ‚ÇÇ): {media2:.2f}
        - Desviaci√≥n est√°ndar poblacional (œÉ‚ÇÇ): {sigma2:.2f}
        
        **Diferencia de medias:**
        - xÃÑ‚ÇÅ - xÃÑ‚ÇÇ = {diff_medias:.2f}
        - Nivel de confianza: {nivel_conf:.0%}
        """)
        
        # Generar contexto autom√°tico
        contexto = f"""Se compara la variable '{var_ic_diff}' entre {var_grupo} 1 y {var_grupo} 2. 
        Con desviaciones est√°ndar poblacionales conocidas de {sigma1:.2f} y {sigma2:.2f} respectivamente,
        se toman muestras de {n1} y {n2} observaciones. Las medias muestrales son {media1:.2f} para {var_grupo} 1 
        y {media2:.2f} para {var_grupo} 2. Se busca construir un intervalo de confianza al {nivel_conf:.0%} 
        para la diferencia de medias poblacionales."""
        st.write(contexto)
        
        # F√≥rmula
        st.write("### F√≥rmula:")
        latex_copyable(r"IC(\mu_1 - \mu_2) = (\bar{X}_1 - \bar{X}_2) \pm Z_{1-\frac{\alpha}{2}} \sqrt{\frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}}", "ic_diff_formula")
        
        # Resoluci√≥n de la f√≥rmula
        st.write("### Resoluci√≥n de la F√≥rmula:")
        latex_copyable(f"IC = ({media1:.4f} - {media2:.4f}) \pm {z_value:.4f} \sqrt{{{sigma1:.4f}¬≤/{n1} + {sigma2:.4f}¬≤/{n2}}}", "ic_diff_med_paso1")
        latex_copyable(f"IC = {diff_medias:.4f} \pm {z_value:.4f} \\times {np.sqrt(sigma1**2/n1 + sigma2**2/n2):.4f}", "ic_diff_med_paso2")
        latex_copyable(f"IC = {diff_medias:.4f} \pm {error_est:.4f}", "ic_diff_med_paso3")
        latex_copyable(f"IC = [{ic_lower:.4f}, {ic_upper:.4f}]", "ic_diff_med_paso4")

        # C√°lculos intermedios
        st.write("### C√°lculos:")
        st.write(f"""
        1. Valor cr√≠tico Z:
        - Œ± = {alpha:.3f}
        - Z‚Çç‚ÇÅ‚ÇãŒ±/‚ÇÇ‚Çé = {z_value:.4f}
        
        2. Error est√°ndar:
        - SE = {z_value:.4f} √ó ‚àö({sigma1:.2f}¬≤/{n1} + {sigma2:.2f}¬≤/{n2})
        - SE = {error_est:.4f}
        """)
        
        # Resultado del intervalo
        st.write("### Intervalo de Confianza:")
        st.write(f"IC = {diff_medias:.2f} ¬± {error_est:.2f}")
        st.write(f"IC = [{ic_lower:.2f}, {ic_upper:.2f}]")
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(diff_medias - 4*error_est, 
                       diff_medias + 4*error_est, 1000)
        y = stats.norm.pdf(x, diff_medias, error_est/z_value)
        
        # Crear el gr√°fico con plotly
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, 
                               name='Distribuci√≥n Normal',
                               line=dict(color='blue', width=2),
                               showlegend=True))
        
        # Agregar el √°rea del intervalo de confianza
        x_ic = np.linspace(ic_lower, ic_upper, 1000)
        y_ic = stats.norm.pdf(x_ic, diff_medias, error_est/z_value)
        fig.add_trace(go.Scatter(x=x_ic, y=y_ic, 
                               fill='tozeroy', 
                               name=f'Intervalo de Confianza {nivel_conf:.0%}',
                               line=dict(color='green', width=0),
                               fillcolor='rgba(0, 255, 0, 0.3)',
                               showlegend=True))
        
        # Agregar l√≠neas verticales para los puntos cr√≠ticos
        for punto in [ic_lower, ic_upper]:
            fig.add_vline(x=punto, 
                         line_dash="dash", 
                         line_color="red",
                         annotation_text=f"{punto:.2f}",
                         annotation_position="top")
        
        # Agregar l√≠nea vertical para la diferencia de medias
        fig.add_vline(x=diff_medias,
                     line_color="green",
                     annotation_text=f"Diferencia: {diff_medias:.2f}",
                     annotation_position="top")
        
        # Personalizar el dise√±o
        fig.update_layout(
            title=f'Intervalo de Confianza para la Diferencia de Medias ({nivel_conf:.0%})',
            xaxis_title=f'Diferencia en {var_ic_diff} ({var_grupo} 1 - {var_grupo} 2)',
            yaxis_title='Densidad',
            showlegend=True,
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            annotations=[
                dict(x=diff_medias, y=max(y)*1.1,
                     text=f"IC: [{ic_lower:.2f}, {ic_upper:.2f}]",
                     showarrow=False)
            ]
        )
        
        st.plotly_chart(fig)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n")
        if ic_lower < 0 and ic_upper > 0:
            interpretacion = f"""
            Con un nivel de confianza del {nivel_conf:.0%}, la diferencia en {var_ic_diff} 
            entre {var_grupo} 1 y {var_grupo} 2 se encuentra entre {ic_lower:.2f} y {ic_upper:.2f}. Como el intervalo 
            contiene el cero, no hay evidencia suficiente para afirmar que existe una diferencia significativa 
            entre los grupos."""
        else:
            interpretacion = f"""
            Con un nivel de confianza del {nivel_conf:.0%}, la diferencia en {var_ic_diff} 
            entre {var_grupo} 1 y {var_grupo} 2 se encuentra entre {ic_lower:.2f} y {ic_upper:.2f}. Como el intervalo 
            no contiene el cero, hay evidencia de una diferencia significativa entre los grupos."""
        
        st.write(interpretacion)

    # f) Proporci√≥n
    with conf_tabs[3]:
        st.write("## 7.4 Intervalo de Confianza para la Proporci√≥n")
        
        st.write("""
        En esta secci√≥n analizaremos la proporci√≥n de visitantes satisfechos (calificaci√≥n ‚â•4) 
        en toda la muestra.
        """)
        
        # Calcular datos reales de satisfacci√≥n
        satisfaccion_alta = 4  # Umbral de satisfacci√≥n alta
        n_total = len(df)
        n_satisfechos = sum(df['Satisfaccion'] >= satisfaccion_alta)
        p_hat = n_satisfechos/n_total
        q_hat = 1 - p_hat
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Mostrar datos calculados
            st.write("### Datos de la Muestra")
            st.write(f"""
            - Total de visitantes (n): {n_total}
            - Visitantes satisfechos (x): {n_satisfechos}
            - Proporci√≥n muestral (pÃÇ): {p_hat:.4f}
            - Complemento (qÃÇ): {q_hat:.4f}
            """)
            
            # Proporci√≥n hipot√©tica
            p0 = st.number_input(
                "Proporci√≥n hipot√©tica (œÄ‚ÇÄ)",
                min_value=0.0,
                max_value=1.0,
                value=0.75,
                step=0.01,
                format="%.2f",
                key="p0_prop_ic"
            )
            
        with col2:
            # Nivel de confianza
            nivel_conf = st.slider(
                "Nivel de confianza",
                min_value=0.80,
                max_value=0.99,
                value=0.95,
                step=0.01,
                key="nivel_conf_prop_ic"
            )
            
            # Calcular tama√±o del efecto (h de Cohen)
            h = 2 * np.arcsin(np.sqrt(p_hat)) - 2 * np.arcsin(np.sqrt(p0))
            
            # Determinar la magnitud del efecto
            if abs(h) < 0.2:
                efecto = "peque√±o"
            elif abs(h) < 0.5:
                efecto = "mediano"
            else:
                efecto = "grande"
                
            st.write("### Tama√±o del Efecto")
            st.write(f"""
            - h de Cohen: {h:.3f}
            - Interpretaci√≥n: Efecto {efecto}
            """)
    
        # C√°lculos del intervalo
        alpha = 1 - nivel_conf
        z_value = stats.norm.ppf(1 - alpha/2)
        error_est = z_value * np.sqrt((p_hat * q_hat)/n_total)
        
        ic_lower = max(0, p_hat - error_est)  # No permitir valores negativos
        ic_upper = min(1, p_hat + error_est)  # No permitir valores mayores a 1
        
        # Mostrar informaci√≥n del problema
        st.write("### Informaci√≥n del Problema")
        st.write(f"""
        Se analiza una muestra de {n_total} visitantes donde se encontraron {n_satisfechos} satisfechos 
        (calificaci√≥n ‚â• {satisfaccion_alta}).
        
        Queremos determinar si la proporci√≥n real de satisfacci√≥n es diferente de {p0:.0%}.
        
        - Proporci√≥n muestral (pÃÇ): {p_hat:.4f}
        - Nivel de confianza: {nivel_conf:.0%}
        """)
        
        # F√≥rmula
        st.write("### F√≥rmula:")
        latex_copyable(r"IC(\pi) = \hat{p} \pm Z_{1-\frac{\alpha}{2}} \sqrt{\frac{\hat{p}(1-\hat{p})}{n}}", "ic_prop_formula")
        
        # Resoluci√≥n de la f√≥rmula
        st.write("### Resoluci√≥n de la F√≥rmula:")
        latex_copyable(f"IC = {p_hat:.4f} \pm {z_value:.4f} \sqrt{{\\frac{{{p_hat:.4f}(1-{p_hat:.4f})}}{{{n_total}}}}}", "ic_prop_paso1")
        latex_copyable(f"IC = {p_hat:.4f} \pm {z_value:.4f} \\times {np.sqrt(p_hat*(1-p_hat)/n_total):.4f}", "ic_prop_paso2")
        latex_copyable(f"IC = {p_hat:.4f} \pm {error_est:.4f}", "ic_prop_paso3")
        latex_copyable(f"IC = [{ic_lower:.4f}, {ic_upper:.4f}]", "ic_prop_paso4")

        # C√°lculos intermedios
        st.write("### C√°lculos:")
        st.write(f"""
        1. Valor cr√≠tico Z:
        - Œ± = {alpha:.3f}
        - Z‚Çç‚ÇÅ‚ÇãŒ±/‚ÇÇ‚Çé = {z_value:.4f}
        
        2. Error est√°ndar:
        - SE = {z_value:.4f} √ó ‚àö({p_hat:.4f} √ó {q_hat:.4f}/{n_total})
        - SE = {error_est:.4f}
        
        3. C√°lculo del intervalo:
        {p_hat:.4f} - {error_est:.4f} < œÄ < {p_hat:.4f} + {error_est:.4f}
        {ic_lower:.4f} < œÄ < {ic_upper:.4f}
        """)
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        if p0 >= ic_lower and p0 <= ic_upper:
            interpretacion = f"""
            Con un {nivel_conf:.0%} de confianza, la proporci√≥n verdadera de visitantes satisfechos 
            se encuentra entre {ic_lower:.4f} y {ic_upper:.4f} ({ic_lower:.1%} y {ic_upper:.1%}).
            
            Como el valor hipot√©tico ({p0:.4f}) est√° dentro del intervalo de confianza, 
            no hay evidencia suficiente para concluir que la proporci√≥n real sea diferente de {p0:.0%}.
            
            El tama√±o del efecto (h de Cohen) es {h:.3f}, lo que se considera un efecto {efecto}.
            """
        else:
            interpretacion = f"""
            Con un {nivel_conf:.0%} de confianza, la proporci√≥n verdadera de visitantes satisfechos 
            se encuentra entre {ic_lower:.4f} y {ic_upper:.4f} ({ic_lower:.1%} y {ic_upper:.1%}).
            
            Como el valor hipot√©tico ({p0:.4f}) est√° fuera del intervalo de confianza, 
            hay evidencia suficiente para concluir que la proporci√≥n real es diferente de {p0:.0%}.
            
            El tama√±o del efecto (h de Cohen) es {h:.3f}, lo que se considera un efecto {efecto}.
            """
        st.write(interpretacion)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x_vals = np.linspace(max(0, p_hat - 4*error_est), 
                           min(1, p_hat + 4*error_est), 1000)
        y = stats.norm.pdf(x_vals, p_hat, error_est/z_value)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x_vals, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # Agregar √°rea del intervalo de confianza
        x_ic = np.linspace(ic_lower, ic_upper, 1000)
        y_ic = stats.norm.pdf(x_ic, p_hat, error_est/z_value)
        fig.add_trace(go.Scatter(x=x_ic, y=y_ic, 
                               fill='tozeroy', 
                               name=f'Intervalo de Confianza {nivel_conf:.0%}',
                               line=dict(color='green', width=0),
                               fillcolor='rgba(0, 255, 0, 0.3)'))
        
        # Agregar l√≠neas verticales para los l√≠mites del intervalo
        for punto, texto in [(ic_lower, f"L√≠mite inferior: {ic_lower:.4f}"), 
                           (ic_upper, f"L√≠mite superior: {ic_upper:.4f}"),
                           (p_hat, f"Proporci√≥n muestral: {p_hat:.4f}"),
                           (p0, f"Proporci√≥n hipot√©tica: {p0:.4f}")]:
            fig.add_vline(x=punto, 
                         line_dash="dash", 
                         line_color="red" if punto in [ic_lower, ic_upper] else "green" if punto == p_hat else "blue",
                         annotation_text=texto,
                         annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title=f'Intervalo de Confianza para la Proporci√≥n ({nivel_conf:.0%})',
            xaxis_title='Proporci√≥n',
            yaxis_title='Densidad',
            showlegend=True,
            xaxis=dict(showgrid=True),
            yaxis=dict(showgrid=True),
            annotations=[
                dict(x=p_hat, y=max(y)*1.1,
                     text=f"IC: [{ic_lower:.2f}, {ic_upper:.2f}]",
                     showarrow=False)
            ]
        )
        
        st.plotly_chart(fig)
        
    # g) Diferencia de Proporciones
    with conf_tabs[4]:
        st.write("## 7.5 Intervalo de Confianza para la Diferencia de Proporciones")
        
        st.write("""
        En esta secci√≥n analizaremos la diferencia de proporciones de satisfacci√≥n alta (calificaci√≥n ‚â•4) 
        entre visitantes masculinos y femeninos.
        """)
        
        # Calcular proporciones y tama√±os de muestra por g√©nero
        satisfaccion_alta = 4  # Definimos satisfacci√≥n alta como ‚â•4
        
        # Grupo 1: Masculino (G√©nero = 1)
        grupo1 = df[df['Genero'] == 1]
        n1 = len(grupo1)
        satisfechos1 = sum(grupo1['Satisfaccion'] >= satisfaccion_alta)
        p1 = satisfechos1 / n1
        
        # Grupo 2: Femenino (G√©nero = 2)
        grupo2 = df[df['Genero'] == 2]
        n2 = len(grupo2)
        satisfechos2 = sum(grupo2['Satisfaccion'] >= satisfaccion_alta)
        p2 = satisfechos2 / n2
            
        # Entrada de datos (mostrando los valores reales calculados)
        col1, col2 = st.columns(2)
        
        with col1:
            # Grupo 1
            st.write("### Grupo 1 (Masculino)")
            p1_input = st.number_input(
                "Proporci√≥n del grupo 1 (p‚ÇÅ):",
                min_value=0.0,
                max_value=1.0,
                value=float(p1),
                step=0.0001,
                format="%.4f",
                key="p1_ic_diff_prop_dist"
            )
            n1_input = st.number_input(
                "Tama√±o de muestra del grupo 1 (n‚ÇÅ):",
                min_value=1,
                value=int(n1),
                step=1,
                key="n1_ic_diff_prop_dist"
            )
            
        with col2:
            # Grupo 2
            st.write("### Grupo 2 (Femenino)")
            p2_input = st.number_input(
                "Proporci√≥n del grupo 2 (p‚ÇÇ):",
                min_value=0.0,
                max_value=1.0,
                value=float(p2),
                step=0.0001,
                format="%.4f",
                key="p2_ic_diff_prop_dist"
            )
            n2_input = st.number_input(
                "Tama√±o de muestra del grupo 2 (n‚ÇÇ):",
                min_value=1,
                value=int(n2),
                step=1,
                key="n2_ic_diff_prop_dist"
            )
        
        # Nivel de confianza
        nivel_conf = st.slider("Nivel de Confianza", 
                             min_value=0.80, max_value=0.99, 
                             value=0.95, step=0.01, key="conf_diff_prop_dist_2")
        
        # C√°lculos
        alpha = 1 - nivel_conf
        z_critico = stats.norm.ppf(1 - alpha/2)
        
        # Complementos
        q1 = 1 - p1_input
        q2 = 1 - p2_input
        
        # Error est√°ndar
        error_est = np.sqrt((p1_input*q1)/n1_input + (p2_input*q2)/n2_input)
        
        # L√≠mites del intervalo
        margen_error = z_critico * error_est
        ic_lower = p1_input - p2_input - margen_error
        ic_upper = p1_input - p2_input + margen_error
        
        # Mostrar resultados
        st.write("### Resultados")
        
        st.write(f"""
        #### Datos del grupo 1:
        - Proporci√≥n muestral (p‚ÇÅ) = {p1_input:.4f}
        - Complemento (q‚ÇÅ) = {q1:.4f}
        - Tama√±o de muestra (n‚ÇÅ) = {n1_input}
        
        #### Datos del grupo 2:
        - Proporci√≥n muestral (p‚ÇÇ) = {p2_input:.4f}
        - Complemento (q‚ÇÇ) = {q2:.4f}
        - Tama√±o de muestra (n‚ÇÇ) = {n2_input}
        
        #### Diferencia de proporciones:
        - p‚ÇÅ - p‚ÇÇ = {p1_input-p2_input:.4f}
        """)
        
        # F√≥rmula
        st.write("### F√≥rmula del Intervalo de Confianza")
        formula = r"p_1 - p_2 \pm Z_{1-\frac{\alpha}{2}} \sqrt{\frac{p_1q_1}{n_1} + \frac{p_2q_2}{n_2}}"
        latex_copyable(formula, "ic_diff_prop_formula")
        
        st.write("### C√°lculos")
        latex_copyable(f"Z_{{1-\\frac{{\\alpha}}{{2}}}} = {z_critico:.4f}", "ic_diff_prop_paso1")
        latex_copyable(f"\\text{{Error est√°ndar}} = \\sqrt{{\\frac{{{p1_input:.4f}\\times{q1:.4f}}}{{{n1_input}}} + \\frac{{{p2_input:.4f}\\times{q2:.4f}}}{{{n2_input}}}}} = {error_est:.4f}", "ic_diff_prop_paso2")
        latex_copyable(f"\\text{{Margen de error}} = {z_critico:.4f} \\times {error_est:.4f} = {margen_error:.4f}", "ic_diff_prop_paso3")
        
        # Intervalo de confianza
        st.write("### Intervalo de Confianza")
        st.write(f"""
        Con un nivel de confianza del {nivel_conf:.0%}, el intervalo de confianza para la diferencia de proporciones es:
        """)
        
        latex_copyable(f"{ic_lower:.4f} < œÄ‚ÇÅ - œÄ‚ÇÇ < {ic_upper:.4f}", "ic_diff_prop_result")
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n:")
        
        # Calcular el tama√±o del efecto (h de Cohen)
        h = 2 * np.arcsin(np.sqrt(p1_input)) - 2 * np.arcsin(np.sqrt(p2_input))
        
        # Determinar la magnitud del efecto
        if abs(h) < 0.2:
            efecto = "peque√±o"
        elif abs(h) < 0.5:
            efecto = "mediano"
        else:
            efecto = "grande"
            
        # Definir umbral de significancia pr√°ctica (10% de diferencia)
        umbral_practico = 0.10
        
        if abs(ic_lower) < 0.01 and abs(ic_upper) > 0.01:
            interpretacion = f"""
            Con un {nivel_conf:.0%} de confianza, la diferencia en proporciones verdaderas entre los dos grupos 
            se encuentra entre {ic_lower:.4f} y {ic_upper:.4f} ({ic_lower:.1%} y {ic_upper:.1%}).
            
            Como el intervalo contiene el cero, no hay evidencia suficiente para concluir que existe 
            una diferencia estad√≠sticamente significativa entre las proporciones de los dos grupos.
            
            El tama√±o del efecto (h de Cohen) es {h:.3f}, lo que se considera un efecto {efecto}.
            """
        else:
            diferencia_significativa = any(abs(x) >= umbral_practico for x in [ic_lower, ic_upper])
            interpretacion = f"""
            Con un {nivel_conf:.0%} de confianza, la diferencia en proporciones verdaderas entre los dos grupos 
            se encuentra entre {ic_lower:.4f} y {ic_upper:.4f} ({ic_lower:.1%} y {ic_upper:.1%}).
            
            Como el intervalo no contiene el cero, hay evidencia suficiente para concluir que existe 
            una diferencia estad√≠sticamente significativa entre las proporciones de los dos grupos.
            
            El tama√±o del efecto (h de Cohen) es {h:.3f}, lo que se considera un efecto {efecto}.
            
            {"La diferencia tambi√©n es pr√°cticamente significativa, superando el umbral del 10%." if diferencia_significativa else
             "Sin embargo, la diferencia podr√≠a no ser pr√°cticamente significativa, ya que no supera el umbral del 10%."}
            """
        st.write(interpretacion)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(p1_input - p2_input - 4*error_est, p1_input - p2_input + 4*error_est, 1000)
        y = stats.norm.pdf(x, p1_input - p2_input, error_est)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # Agregar √°rea del intervalo de confianza
        x_ic = x[(x >= ic_lower) & (x <= ic_upper)]
        y_ic = y[(x >= ic_lower) & (x <= ic_upper)]
        
        fig.add_trace(go.Scatter(x=x_ic, y=y_ic, 
                               fill='tozeroy', 
                               name=f'Intervalo de Confianza {nivel_conf:.0%}',
                               line=dict(color='green', width=0),
                               fillcolor='rgba(0, 255, 0, 0.3)'))
        
        # Agregar l√≠neas verticales para los l√≠mites del intervalo
        for punto, texto in [(ic_lower, f"L√≠mite inferior: {ic_lower:.4f}"), 
                           (ic_upper, f"L√≠mite superior: {ic_upper:.4f}"),
                           (p1_input - p2_input, f"Diferencia observada: {p1_input - p2_input:.4f}")]:
            fig.add_vline(x=punto, 
                         line_dash="dash", 
                         line_color="red",
                         annotation_text=texto,
                         annotation_position="top")
        
        # Agregar l√≠neas para umbrales de significancia pr√°ctica
        fig.add_vline(x=umbral_practico, 
                     line_dash="dot",
                     line_color="gray",
                     annotation_text="Umbral de significancia pr√°ctica (10%)",
                     annotation_position="bottom")
        fig.add_vline(x=-umbral_practico, 
                     line_dash="dot",
                     line_color="gray")
        
        # Actualizar layout
        fig.update_layout(
            title=f"Intervalo de Confianza {nivel_conf:.0%} para la Diferencia de Proporciones",
            xaxis_title="Diferencia de Proporciones",
            yaxis_title="Densidad",
            showlegend=True
        )
        
        st.plotly_chart(fig)
        
    # h) Varianza
    with conf_tabs[5]:
        st.write("## 7.6 Intervalo de Confianza para la Varianza")
        
        st.write("""
        El intervalo de confianza para la varianza poblacional (œÉ¬≤) nos permite estimar un rango de valores 
        donde se encuentra la verdadera varianza de la poblaci√≥n, bas√°ndonos en la varianza muestral (s¬≤).
        
        Este intervalo es √∫til cuando necesitamos:
        - Evaluar la dispersi√≥n de los datos en la poblaci√≥n
        - Comparar la variabilidad entre diferentes poblaciones
        - Realizar control de calidad en procesos
        """)
        
        # F√≥rmula principal
        st.write("### F√≥rmula:")
        latex_copyable(r"IC(\sigma^2) = \left(\frac{(n-1)s^2}{\chi^2_{n-1,1-\frac{\alpha}{2}}}, \frac{(n-1)s^2}{\chi^2_{n-1,\frac{\alpha}{2}}}\right)", "ic_var_formula")
        
        st.write("""
        Donde:
        - s¬≤ = Varianza muestral
        - n = Tama√±o de la muestra
        - œá¬≤ = Valor cr√≠tico de la distribuci√≥n chi-cuadrado
        - Œ± = Nivel de significancia (1 - nivel de confianza)
        """)
        
        # Pasos de c√°lculo
        st.write("### Pasos de c√°lculo:")
        latex_copyable(r"\text{L√≠mite inferior: } \frac{(n-1)s^2}{\chi^2_{n-1,1-\frac{\alpha}{2}}}", "ic_var_paso1")
        latex_copyable(r"\text{L√≠mite superior: } \frac{(n-1)s^2}{\chi^2_{n-1,\frac{\alpha}{2}}}", "ic_var_paso2")
