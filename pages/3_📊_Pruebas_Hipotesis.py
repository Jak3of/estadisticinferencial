import streamlit as st
import numpy as np
from scipy import stats
import plotly.graph_objects as go
import pandas as pd
from pathlib import Path

def latex_copyable(formula, label=""):
    """Muestra una f√≥rmula LaTeX con un bot√≥n para copiar."""
    col1, col2 = st.columns([4, 1])
    with col1:
        st.latex(formula)
    with col2:
        if st.button(f"üìã Copiar", key=f"copy_{label}"):
            try:
                st.code(formula, language="latex")
                st.toast("¬°F√≥rmula mostrada! Puedes copiarla desde el bloque de c√≥digo", icon="‚úÖ")
            except Exception as e:
                st.error(f"Error al mostrar la f√≥rmula: {str(e)}")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Pruebas de Hip√≥tesis",
    page_icon="üìä",
    layout="wide"
)

# Funci√≥n para cargar datos
@st.cache_data(ttl=0)
def cargar_datos():
    ruta_base = Path(__file__).parent.parent
    ruta_datos = ruta_base / 'data' / 'encuesta_recreacion_numerica.csv'
    df = pd.read_csv(ruta_datos)
    return df

# Cargar datos
df = cargar_datos()

# Configuraci√≥n de variables
config_variables = {
    'Edad': {
        'descripcion': 'la edad',
        'unidad': 'a√±os',
        'periodo': ''
    },
    'Frecuencia_Visitas': {
        'descripcion': 'la frecuencia de visitas',
        'unidad': 'veces',
        'periodo': 'por mes'
    },
    'Satisfaccion': {
        'descripcion': 'el nivel de satisfacci√≥n',
        'unidad': 'puntos',
        'periodo': ''
    },
    'Preferencia': {
        'descripcion': 'el nivel de preferencia',
        'unidad': 'puntos',
        'periodo': ''
    }
}

# T√≠tulo principal
st.title("CAP√çTULO 3: Pruebas de Hip√≥tesis")

# Crear pesta√±as principales
main_tabs = st.tabs([
    "1. Pruebas de Hip√≥tesis Estad√≠stica",
    "2. Pruebas No Param√©tricas"
])

# 1. Pruebas de Hip√≥tesis Estad√≠stica
with main_tabs[0]:
    st.header("1. Pruebas de Hip√≥tesis Estad√≠stica")
    
    # Crear subtabs para cada tipo de prueba
    pruebas_tabs = st.tabs([
        "1.1 Media (œÉ¬≤ conocida)",
        "1.2 Media (œÉ¬≤ desconocida)",
        "1.3 Diferencia de Medias (œÉ¬≤ conocida)",
        "1.4 Diferencia de Medias (œÉ¬≤ desconocida iguales)",
        "1.5 Diferencia de Medias (œÉ¬≤ desconocida diferentes)",
        "1.6 Proporci√≥n",
        "1.7 Diferencia de Proporciones",
        "1.8 Prueba Chi-cuadrado para la Varianza de una Poblaci√≥n"
    ])
    
    # 1.1 Media con varianza conocida
    with pruebas_tabs[0]:
        st.write("## 1.1 Prueba de Hip√≥tesis para la Media (œÉ¬≤ conocida)")
        
        st.write("""
        ### Ejemplo: Edad Promedio de Visitantes
        
        **Contexto del Problema:**  
        Estudios previos en centros recreativos similares han determinado que la edad promedio de los 
        visitantes es de 25 a√±os, con una desviaci√≥n est√°ndar poblacional conocida de 5 a√±os. El 
        administrador de "Aventura Park" cree que la edad promedio de sus visitantes es diferente 
        y desea verificar esta afirmaci√≥n.
        
        **Planteamiento:**
        - Variable de estudio: Edad de los visitantes
        - Tama√±o de muestra: 30 visitantes
        - Desviaci√≥n est√°ndar poblacional (œÉ): 5 a√±os
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº = 25 (La edad promedio de los visitantes es igual a 25 a√±os)
        - H‚ÇÅ: Œº ‚â† 25 (La edad promedio de los visitantes es diferente de 25 a√±os)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Edad'
        mu0 = 25  # Valor hipot√©tico fijo
        sigma = 5  # Desviaci√≥n est√°ndar poblacional conocida
        alpha = 0.05  # Nivel de significancia fijo
        
        # Estad√≠sticos de la muestra
        n = len(df[variable])
        media_muestral = df[variable].mean()
        z_calc = (media_muestral - mu0) / (sigma / np.sqrt(n))
        
        # Valores cr√≠ticos para prueba bilateral
        z_crit = stats.norm.ppf(1 - alpha/2)
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Media muestral (xÃÑ) = {media_muestral:.2f} a√±os
            - Valor a probar (Œº‚ÇÄ) = {mu0:.2f} a√±os
            - Desviaci√≥n est√°ndar poblacional (œÉ) = {sigma:.2f}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como la varianza poblacional es conocida, usamos la distribuci√≥n normal Z:")
        formula = r"Z = \frac{\bar{x} - \mu_0}{\sigma/\sqrt{n}}"
        latex_copyable(formula, "z_media")
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral (xÃÑ) = {media_muestral:.4f}
        - Media hipot√©tica (Œº‚ÇÄ) = {mu0:.4f}
        - Desviaci√≥n est√°ndar poblacional (œÉ) = {sigma:.4f}
        - Tama√±o de muestra (n) = {n}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"Z = \frac{{{media_muestral:.4f} - {mu0:.4f}}}{{{sigma:.4f}/\sqrt{{{n}}}}} = \frac{{{media_muestral-mu0:.4f}}}{{{sigma/np.sqrt(n):.4f}}} = {z_calc:.4f}"
        latex_copyable(sustitucion, "z_media_calc")
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |Z| = |{z_calc:.4f}|
        Valor cr√≠tico = ¬±{z_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que la edad 
            promedio de los visitantes en Aventura Park es diferente de 25 a√±os. Espec√≠ficamente, la edad promedio 
            observada es de {media_muestral:.2f} a√±os, lo que indica que los visitantes son {"m√°s j√≥venes" if media_muestral < mu0 else "mayores"} 
            que lo t√≠picamente observado en centros recreativos similares.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que la edad 
            promedio de los visitantes en Aventura Park es diferente de 25 a√±os. La edad promedio observada de 
            {media_muestral:.2f} a√±os no es estad√≠sticamente diferente de lo t√≠picamente observado en centros recreativos similares.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para Z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"Z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Media de Edad',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_media_edad")
        
    # 1.2 Media con varianza desconocida
    with pruebas_tabs[1]:
        st.write("## 1.2 Prueba de Hip√≥tesis para la Media (œÉ¬≤ desconocida)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n en Centro Recreativo
        
        **Contexto del Problema:**  
        El centro recreativo "Aventura Park" ha estado monitoreando la satisfacci√≥n de sus visitantes 
        en una escala del 1 al 5. La administraci√≥n del parque ha establecido como est√°ndar de calidad 
        un nivel de satisfacci√≥n de 4 puntos. El equipo de gesti√≥n desea verificar si el nivel actual 
        de satisfacci√≥n es diferente del est√°ndar establecido.
        
        **Planteamiento:**
        - Variable de estudio: Nivel de satisfacci√≥n de los visitantes
        - Tama√±o de muestra: 30 visitantes
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº = 4 (El nivel promedio de satisfacci√≥n es igual a 4 puntos)
        - H‚ÇÅ: Œº ‚â† 4 (El nivel promedio de satisfacci√≥n es diferente de 4 puntos)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Satisfaccion'
        mu0 = 4  # Valor hipot√©tico fijo
        alpha = 0.05  # Nivel de significancia fijo
        
        # Estad√≠sticos de la muestra
        n = len(df[variable])
        media_muestral = df[variable].mean()
        s = df[variable].std()  # Desviaci√≥n est√°ndar muestral
        gl = n - 1  # Grados de libertad
        t_calc = (media_muestral - mu0) / (s / np.sqrt(n))
        
        # Valores cr√≠ticos para prueba bilateral
        t_crit = stats.t.ppf(1 - alpha/2, gl)
        p_value = 2 * (1 - stats.t.cdf(abs(t_calc), gl))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Media muestral (xÃÑ) = {media_muestral:.2f} puntos
            - Valor a probar (Œº‚ÇÄ) = {mu0:.2f} puntos
            - Desviaci√≥n est√°ndar muestral (s) = {s:.2f}
            - Grados de libertad (gl) = {gl}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - t calculado = {t_calc:.4f}
            - t cr√≠tico = ¬±{t_crit:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como la varianza poblacional es desconocida y n ‚â§ 30, usamos la distribuci√≥n t-Student:")
        formula = r"t = \frac{\bar{x} - \mu_0}{s/\sqrt{n}}"
        latex_copyable(formula, "t_media_12")  # Cambiado de "t_media" a "t_media_12"
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral (xÃÑ) = {media_muestral:.4f}
        - Media hipot√©tica (Œº‚ÇÄ) = {mu0:.4f}
        - Desviaci√≥n est√°ndar muestral (s) = {s:.4f}
        - Tama√±o de muestra (n) = {n}
        - Grados de libertad (gl) = {gl}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"t = \frac{{{media_muestral:.4f} - {mu0:.4f}}}{{{s:.4f}/\sqrt{{{n}}}}} = \frac{{{media_muestral-mu0:.4f}}}{{{s/np.sqrt(n):.4f}}} = {t_calc:.4f}"
        latex_copyable(sustitucion, "t_media_calc_12")  # Cambiado para ser √∫nico
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |t| = |{t_calc:.4f}|
        Valor cr√≠tico = ¬±{t_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. Espec√≠ficamente, el nivel promedio 
            de satisfacci√≥n observado es de {media_muestral:.2f} puntos, lo que sugiere que el centro recreativo 
            {"no est√° alcanzando" if media_muestral < mu0 else "est√° superando"} el est√°ndar establecido.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. El nivel promedio observado de 
            {media_muestral:.2f} puntos no es estad√≠sticamente diferente del est√°ndar establecido.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n t
        x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
        y = stats.t.pdf(x, gl)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva t
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -t_crit]
        y_rej_izq = stats.t.pdf(x_rej_izq, gl)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= t_crit]
        y_rej_der = stats.t.pdf(x_rej_der, gl)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para t calculado
        fig.add_vline(x=t_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"t calc = {t_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Media de Satisfacci√≥n',
            xaxis_title='Estad√≠stico t',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_media_satisfaccion")
        
    # 1.3 Diferencia de medias con varianza conocida
    with pruebas_tabs[2]:
        st.write("## 1.3 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ conocida)")
        
        st.write("""
        ### Ejemplo: Frecuencia de Visitas por Grupos de Edad
        
        **Contexto del Problema:**  
        El administrador de Aventura Park quiere comparar la frecuencia de visitas entre dos grupos: 
        j√≥venes (‚â§ 25 a√±os) y adultos (> 25 a√±os). Estudios previos han determinado que la desviaci√≥n 
        est√°ndar de la frecuencia de visitas es de 1.5 visitas/mes para ambos grupos. Se desea verificar 
        si existe una diferencia significativa en la frecuencia de visitas entre estos grupos.
        
        **Planteamiento:**
        - Variable: Frecuencia de visitas mensuales
        - Grupos:
          * Grupo 1: Visitantes ‚â§ 25 a√±os
          * Grupo 2: Visitantes > 25 a√±os
        - Desviaci√≥n est√°ndar conocida (œÉ‚ÇÅ = œÉ‚ÇÇ = 1.5 visitas/mes)
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº‚ÇÅ - Œº‚ÇÇ = 0 (No hay diferencia en la frecuencia de visitas entre grupos)
        - H‚ÇÅ: Œº‚ÇÅ - Œº‚ÇÇ ‚â† 0 (Existe diferencia en la frecuencia de visitas entre grupos)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Frecuencia_Visitas'
        sigma = 1.5  # Desviaci√≥n est√°ndar poblacional conocida
        alpha = 0.05  # Nivel de significancia fijo
        
        # Crear los grupos
        grupo1 = df[df['Edad'] <= 25][variable]
        grupo2 = df[df['Edad'] > 25][variable]
        
        # Estad√≠sticos de las muestras
        n1 = len(grupo1)
        n2 = len(grupo2)
        media1 = grupo1.mean()
        media2 = grupo2.mean()
        
        # C√°lculo del estad√≠stico Z
        z_calc = (media1 - media2) / np.sqrt((sigma**2/n1) + (sigma**2/n2))
        
        # Valores cr√≠ticos para prueba bilateral
        z_crit = stats.norm.ppf(1 - alpha/2)
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos Grupo 1 (‚â§ 25 a√±os):**
            - Tama√±o de muestra (n‚ÇÅ) = {n1}
            - Media muestral (xÃÑ‚ÇÅ) = {media1:.2f} visitas/mes
            
            **Datos Grupo 2 (> 25 a√±os):**
            - Tama√±o de muestra (n‚ÇÇ) = {n2}
            - Media muestral (xÃÑ‚ÇÇ) = {media2:.2f} visitas/mes
            
            **Par√°metros:**
            - Desviaci√≥n est√°ndar (œÉ‚ÇÅ = œÉ‚ÇÇ) = {sigma:.2f}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            
            **Diferencia de medias:**
            - xÃÑ‚ÇÅ - xÃÑ‚ÇÇ = {media1 - media2:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como las varianzas poblacionales son conocidas e iguales, usamos la distribuci√≥n normal Z:")
        formula = r"Z = \frac{(\bar{x}_1 - \bar{x}_2) - (\mu_1 - \mu_2)_0}{\sqrt{\frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}}}"
        latex_copyable(formula, "z_diff_medias")
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral grupo 1 (xÃÑ‚ÇÅ) = {media1:.4f}
        - Media muestral grupo 2 (xÃÑ‚ÇÇ) = {media2:.4f}
        - Diferencia hipot√©tica (Œº‚ÇÅ - Œº‚ÇÇ)‚ÇÄ = 0
        - Desviaci√≥n est√°ndar (œÉ‚ÇÅ = œÉ‚ÇÇ) = {sigma:.4f}
        - Tama√±os de muestra: n‚ÇÅ = {n1}, n‚ÇÇ = {n2}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"Z = \frac{{({media1:.4f} - {media2:.4f}) - 0}}{{\sqrt{{\frac{{{sigma:.4f}^2}}{{{n1}}} + \frac{{{sigma:.4f}^2}}{{{n2}}}}}}} = \frac{{{media1-media2:.4f}}}{{{np.sqrt((sigma**2/n1) + (sigma**2/n2)):.4f}}} = {z_calc:.4f}"
        latex_copyable(sustitucion, "z_diff_medias_calc")
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |Z| = |{z_calc:.4f}|
        Valor cr√≠tico = ¬±{z_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que hay 
            una diferencia significativa en la frecuencia de visitas entre los grupos de edad. El grupo 
            {"joven (‚â§ 25 a√±os)" if media1 > media2 else "adulto (> 25 a√±os)"} tiene una frecuencia promedio 
            mayor de visitas ({max(media1, media2):.2f} visitas/mes vs {min(media1, media2):.2f} visitas/mes).
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que hay una 
            diferencia significativa en la frecuencia de visitas entre los grupos de edad. Aunque el grupo 
            {"joven (‚â§ 25 a√±os)" if media1 > media2 else "adulto (> 25 a√±os)"} tiene una frecuencia promedio 
            ligeramente mayor ({max(media1, media2):.2f} visitas/mes vs {min(media1, media2):.2f} visitas/mes), 
            esta diferencia no es estad√≠sticamente significativa.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para Z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"Z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Diferencia de Medias en Frecuencia de Visitas',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_diferencia_medias")
        
        # Mostrar box plot de comparaci√≥n
        st.write("### Comparaci√≥n de Grupos")
        fig_box = go.Figure()
        
        fig_box.add_trace(go.Box(y=grupo1, name='‚â§ 25 a√±os',
                                boxpoints='all', jitter=0.3, pointpos=-1.8))
        fig_box.add_trace(go.Box(y=grupo2, name='> 25 a√±os',
                                boxpoints='all', jitter=0.3, pointpos=-1.8))
        
        fig_box.update_layout(
            title='Distribuci√≥n de Frecuencia de Visitas por Grupo de Edad',
            yaxis_title='Frecuencia de Visitas (por mes)',
            showlegend=True
        )
        
        st.plotly_chart(fig_box, use_container_width=True, key="box_plot_comparacion_grupos")
        
    # 1.4 Diferencia de medias con varianza desconocida iguales
    with pruebas_tabs[3]:
        st.write("## 1.4 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ desconocidas iguales)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        El administrador de Aventura Park desea investigar si existe una diferencia significativa en los niveles 
        de satisfacci√≥n entre visitantes masculinos y femeninos.
        
        **Planteamiento:**
        - Variable de estudio: Nivel de satisfacci√≥n de los visitantes por g√©nero
        - Hip√≥tesis nula (H‚ÇÄ): No hay diferencia en la satisfacci√≥n media entre g√©neros
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº‚ÇÅ - Œº‚ÇÇ = 0 (No hay diferencia en la satisfacci√≥n media entre g√©neros)
        - H‚ÇÅ: Œº‚ÇÅ - Œº‚ÇÇ ‚â† 0 (Existe diferencia en la satisfacci√≥n media entre g√©neros)
        
        **Tipo de Prueba:** Bilateral
        """)
        
        # Separar datos por g√©nero
        grupo1 = df[df['Genero'] == 1]['Satisfaccion']
        grupo2 = df[df['Genero'] == 2]['Satisfaccion']
        
        # Verificar que hay suficientes datos en cada grupo
        if len(grupo1) == 0 or len(grupo2) == 0:
            st.error("Error: No hay suficientes datos en uno o ambos grupos.")
        else:
            # Calcular estad√≠sticos
            n1 = len(grupo1)
            n2 = len(grupo2)
            media1 = grupo1.mean()
            media2 = grupo2.mean()
            var1 = grupo1.var(ddof=1)
            var2 = grupo2.var(ddof=1)
            
            # Verificar que las varianzas no son cero
            if var1 == 0 and var2 == 0:
                st.warning("Las varianzas de ambos grupos son cero. Esto significa que todos los valores son id√©nticos en cada grupo.")
            else:
                # Varianza combinada
                sp2 = ((n1-1)*var1 + (n2-1)*var2)/(n1 + n2 - 2)
                
                # Verificar que la varianza combinada no es cero
                if sp2 <= 0:
                    st.error("Error: La varianza combinada es cero o negativa. No se puede realizar la prueba.")
                else:
                    sp = np.sqrt(sp2)
                    
                    # Estad√≠stico t
                    denominador = sp*np.sqrt(1/n1 + 1/n2)
                    if denominador == 0:
                        st.error("Error: No se puede calcular el estad√≠stico t debido a una divisi√≥n por cero.")
                    else:
                        t_calc = (media1 - media2)/denominador
                        gl = n1 + n2 - 2
                        
                        # Valores cr√≠ticos
                        alpha = 0.05
                        t_crit = stats.t.ppf(1 - alpha/2, gl)
                        p_value = 2 * (1 - stats.t.cdf(abs(t_calc), gl))
                        
                        # Mostrar resultados
                        st.write("### Resultados")
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"""
                            **Datos Grupo 1 (Masculino):**
                            - Tama√±o de muestra (n‚ÇÅ) = {n1}
                            - Media muestral (xÃÑ‚ÇÅ) = {media1:.2f}
                            - Varianza muestral (s‚ÇÅ¬≤) = {var1:.2f}
                            
                            **Datos Grupo 2 (Femenino):**
                            - Tama√±o de muestra (n‚ÇÇ) = {n2}
                            - Media muestral (xÃÑ‚ÇÇ) = {media2:.2f}
                            - Varianza muestral (s‚ÇÇ¬≤) = {var2:.2f}
                            """)
                            
                        with col2:
                            st.write(f"""
                            **Estad√≠sticos:**
                            - Varianza combinada (sp¬≤) = {sp2:.4f}
                            - Grados de libertad (gl) = {gl}
                            - t calculado = {t_calc:.4f}
                            - t cr√≠tico = ¬±{t_crit:.4f}
                            - Valor p = {p_value:.4f}
                            """)
                        
                        # F√≥rmulas en LaTeX
                        st.write("### F√≥rmulas Principales")
                        
                        st.write("**1. Varianza Combinada:**")
                        formula_sp = r"s_p^2 = \frac{(n_1-1)s_1^2 + (n_2-1)s_2^2}{n_1 + n_2 - 2}"
                        latex_copyable(formula_sp, "sp2")
                        
                        st.write("**2. Estad√≠stico t:**")
                        formula_t = r"t = \frac{\bar{x}_1 - \bar{x}_2}{s_p\sqrt{\frac{1}{n_1} + \frac{1}{n_2}}}"
                        latex_copyable(formula_t, "t_stat")
                        
                        st.write("**3. Grados de libertad:**")
                        formula_gl = r"gl = n_1 + n_2 - 2"
                        latex_copyable(formula_gl, "gl")
                        
                        # Resoluci√≥n paso a paso
                        st.write("### Resoluci√≥n")
                        
                        st.write("**Paso 1: Calcular la varianza combinada**")
                        formula_sp_calc = rf"s_p^2 = \frac{{({n1}-1){var1:.4f} + ({n2}-1){var2:.4f}}}{{{n1} + {n2} - 2}} = {sp2:.4f}"
                        latex_copyable(formula_sp_calc, "sp2_calc")
                        
                        st.write("**Paso 2: Calcular el estad√≠stico t**")
                        formula_t_calc = rf"t = \frac{{{media1:.4f} - {media2:.4f}}}{{{sp:.4f}\sqrt{{\frac{{1}}{{{n1}}} + \frac{{1}}{{{n2}}}}}}} = {t_calc:.4f}"
                        latex_copyable(formula_t_calc, "t_calc")
                        
                        st.write("**Paso 3: Decisi√≥n e Interpretaci√≥n**")
                        if p_value < alpha:
                            st.write(f"""
                            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
                            
                            **Interpretaci√≥n:**  
                            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que hay una 
                            diferencia significativa en los niveles de satisfacci√≥n entre visitantes masculinos y femeninos. 
                            La diferencia observada es de {media1 - media2:.2f} puntos.
                            """)
                        else:
                            st.write(f"""
                            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
                            
                            **Interpretaci√≥n:**  
                            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que hay una 
                            diferencia significativa en los niveles de satisfacci√≥n entre visitantes masculinos y femeninos.
                            """)
                        
                        # Visualizaci√≥n
                        st.write("### Visualizaci√≥n")
                        
                        # Crear datos para la distribuci√≥n t
                        x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
                        y = stats.t.pdf(x, gl)
                        
                        # Crear figura
                        fig = go.Figure()
                        
                        # Agregar la curva t
                        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                                               line=dict(color='blue')))
                        
                        # √Åreas de rechazo
                        # √Årea de rechazo izquierda
                        x_rej_izq = x[x <= -t_crit]
                        y_rej_izq = stats.t.pdf(x_rej_izq, gl)
                        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                                               fill='tozeroy', 
                                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                                               line=dict(color='red', width=0)))
                        
                        # √Årea de rechazo derecha
                        x_rej_der = x[x >= t_crit]
                        y_rej_der = stats.t.pdf(x_rej_der, gl)
                        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                                               fill='tozeroy', 
                                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                                               line=dict(color='red', width=0)))
                        
                        # Agregar l√≠nea vertical para t calculado
                        fig.add_vline(x=t_calc, 
                                     line_dash="dash", 
                                     line_color="green",
                                     annotation_text=f"t calc = {t_calc:.4f}",
                                     annotation_position="top")
                        
                        # Actualizar layout
                        fig.update_layout(
                            title='Prueba de Hip√≥tesis para Diferencia de Medias',
                            xaxis_title='Estad√≠stico t',
                            yaxis_title='Densidad',
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # A√±adir boxplot para visualizar distribuci√≥n por g√©nero
                        fig_box = go.Figure()
                        
                        fig_box.add_trace(go.Box(y=grupo1, name='Masculino',
                                                boxpoints='all', jitter=0.3, pointpos=-1.8))
                        fig_box.add_trace(go.Box(y=grupo2, name='Femenino',
                                                boxpoints='all', jitter=0.3, pointpos=-1.8))
                        
                        fig_box.update_layout(
                            title='Distribuci√≥n de Satisfacci√≥n por G√©nero',
                            yaxis_title='Nivel de Satisfacci√≥n',
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig_box, use_container_width=True, key="box_plot_genero")
                        
    # 1.5 Diferencia de medias con varianza desconocida diferentes
    with pruebas_tabs[4]:
        st.write("## 1.5 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ desconocidas diferentes)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        El administrador de Aventura Park desea investigar si los visitantes masculinos tienen un nivel
        de satisfacci√≥n significativamente mayor que las visitantes femeninas, sin asumir que las varianzas son iguales.
        
        **Planteamiento:**
        - Variable de estudio: Nivel de satisfacci√≥n de los visitantes por g√©nero
        - Hip√≥tesis nula (H‚ÇÄ): Los hombres no tienen mayor satisfacci√≥n que las mujeres
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº‚ÇÅ - Œº‚ÇÇ ‚â§ 0 (Los hombres no tienen mayor satisfacci√≥n que las mujeres)
        - H‚ÇÅ: Œº‚ÇÅ - Œº‚ÇÇ > 0 (Los hombres tienen mayor satisfacci√≥n que las mujeres)
        
        **Tipo de Prueba:** Unilateral derecha
        """)
        
        # Separar datos por g√©nero
        grupo1 = df[df['Genero'] == 1]['Satisfaccion']  # Masculino (1)
        grupo2 = df[df['Genero'] == 2]['Satisfaccion']  # Femenino (2)
        
        # Verificar que hay suficientes datos en cada grupo
        if len(grupo1) == 0 or len(grupo2) == 0:
            st.error("Error: No hay suficientes datos en uno o ambos grupos.")
        else:
            # Calcular estad√≠sticos
            n1 = len(grupo1)
            n2 = len(grupo2)
            media1 = grupo1.mean()
            media2 = grupo2.mean()
            var1 = grupo1.var(ddof=1)
            var2 = grupo2.var(ddof=1)
            
            # Verificar que las varianzas no son cero
            if var1 == 0 and var2 == 0:
                st.warning("Las varianzas de ambos grupos son cero. Esto significa que todos los valores son id√©nticos en cada grupo.")
            else:
                # Calcular el estad√≠stico t'
                denominador = np.sqrt(var1/n1 + var2/n2)
                if denominador == 0:
                    st.error("Error: No se puede calcular el estad√≠stico t debido a una divisi√≥n por cero.")
                else:
                    t_calc = (media1 - media2)/denominador
                    
                    # Grados de libertad de Welch-Satterthwaite
                    num = (var1/n1 + var2/n2)**2
                    den = (var1/n1)**2/(n1-1) + (var2/n2)**2/(n2-1)
                    gl = num/den
                    
                    # Valores cr√≠ticos (cambio a unilateral)
                    alpha = 0.05
                    t_crit = stats.t.ppf(1 - alpha, gl)  # Ya no dividimos alpha entre 2
                    p_value = 1 - stats.t.cdf(t_calc, gl)  # Solo cola derecha
                    
                    # Mostrar resultados
                    st.write("### Resultados")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"""
                        **Grupo 1 (Masculino):**
                        - Tama√±o de muestra (n‚ÇÅ) = {n1}
                        - Media muestral (xÃÑ‚ÇÅ) = {media1:.2f}
                        - Varianza muestral (s‚ÇÅ¬≤) = {var1:.2f}
                        
                        **Grupo 2 (Femenino):**
                        - Tama√±o de muestra (n‚ÇÇ) = {n2}
                        - Media muestral (xÃÑ‚ÇÇ) = {media2:.2f}
                        - Varianza muestral (s‚ÇÇ¬≤) = {var2:.2f}
                        """)
                        
                    with col2:
                        st.write(f"""
                        **Estad√≠sticos:**
                        - Grados de libertad (ŒΩ) = {gl:.2f}
                        - t' calculado = {t_calc:.4f}
                        - t' cr√≠tico = {t_crit:.4f}
                        - Valor p = {p_value:.4f}
                        """)
                    
                    # F√≥rmulas en LaTeX
                    st.write("### F√≥rmulas")
                    
                    st.write("**1. Estad√≠stico de Prueba T':**")
                    formula_t = r"T_{cal} = \frac{\bar{X}_1 - \bar{X}_2 - (\mu_1 - \mu_2)_{hip}}{\sqrt{\frac{s_1^2}{n_1} + \frac{s_2^2}{n_2}}}"
                    latex_copyable(formula_t, "t_welch")
                    
                    st.write("**2. Grados de libertad (Welch-Satterthwaite):**")
                    formula_gl = r"\nu = \frac{(\frac{s_1^2}{n_1} + \frac{s_2^2}{n_2})^2}{\frac{(s_1^2/n_1)^2}{n_1-1} + \frac{(s_2^2/n_2)^2}{n_2-1}}"
                    latex_copyable(formula_gl, "gl_welch")
                    
                    st.write("**3. Regi√≥n de Rechazo:**")
                    formula_rr = r"T_{cal} > t_{\alpha,\nu}"
                    latex_copyable(formula_rr, "rr_welch")
                    
                    st.write("**4. Valor p:**")
                    formula_p = r"p = 1 - F_{t,\nu}(T_{cal})"
                    latex_copyable(formula_p, "p_welch")
                    
                    st.write("**Paso 1: Calcular el estad√≠stico T**")
                    formula_t_calc = rf"T_{{cal}} = \frac{{{media1:.4f} - {media2:.4f} - 0}}{{\sqrt{{\frac{{{var1:.4f}}}{{{n1}}} + \frac{{{var2:.4f}}}{{{n2}}}}}}} = {t_calc:.4f}"
                    latex_copyable(formula_t_calc, "t_welch_calc")
                    
                    st.write("**Paso 2: Calcular los grados de libertad**")
                    formula_gl_calc = rf"\nu = \frac{{(\frac{{{var1:.4f}}}{{{n1}}} + \frac{{{var2:.4f}}}{{{n2}}})^2}}{{\frac{{({var1:.4f}/{n1})^2}}{{{n1}-1}} + \frac{{({var2:.4f}/{n2})^2}}{{{n2}-1}}}} = {gl:.2f}"
                    latex_copyable(formula_gl_calc, "gl_welch_calc")
                    
                    st.write("**Paso 3: Decisi√≥n e Interpretaci√≥n**")
                    if p_value < alpha:
                        st.write(f"""
                        Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
                        
                        **Interpretaci√≥n:**  
                        Hay evidencia estad√≠stica suficiente para afirmar que los visitantes masculinos tienen
                        un nivel de satisfacci√≥n significativamente mayor que las visitantes femeninas
                        (con un nivel de significancia de {alpha}).
                        """)
                    else:
                        st.write(f"""
                        Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
                        
                        **Interpretaci√≥n:**  
                        No hay evidencia estad√≠stica suficiente para concluir que los visitantes masculinos tienen
                        un nivel de satisfacci√≥n significativamente mayor que las visitantes femeninas
                        (con un nivel de significancia de {alpha}).
                        """)
                    
                    # Visualizaci√≥n
                    st.write("### Visualizaci√≥n")
                    
                    # Crear datos para la distribuci√≥n t
                    x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
                    y = stats.t.pdf(x, gl)
                    
                    # Crear figura
                    fig = go.Figure()
                    
                    # Agregar la curva t
                    fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                                           line=dict(color='blue')))
                    
                    # √Åreas de rechazo
                    # √Årea de rechazo derecha
                    x_rechazo = x[x >= t_crit]
                    y_rechazo = y[x >= t_crit]
                    
                    fig.add_trace(go.Scatter(x=x_rechazo, y=y_rechazo, 
                                           fill='tozeroy', 
                                           fillcolor='rgba(255,0,0,0.3)',
                                           line=dict(color='red'),
                                           name=f'Regi√≥n de rechazo (Œ±={alpha})'
                                           ))
                    
                    # Agregar l√≠nea vertical para t calculado
                    fig.add_vline(x=t_calc, 
                                 line_dash="dash", 
                                 line_color="green",
                                 annotation_text=f"t' calc = {t_calc:.4f}",
                                 annotation_position="top")
                    
                    # Actualizar layout
                    fig.update_layout(
                        title='Prueba de Hip√≥tesis para Diferencia de Medias (Welch)',
                        xaxis_title='Estad√≠stico t\'',
                        yaxis_title='Densidad',
                        showlegend=True
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # A√±adir boxplot para visualizar distribuci√≥n por g√©nero
                    fig_box = go.Figure()
                    
                    fig_box.add_trace(go.Box(y=grupo1, name='Masculino',
                                            boxpoints='all', jitter=0.3, pointpos=-1.8))
                    fig_box.add_trace(go.Box(y=grupo2, name='Femenino',
                                            boxpoints='all', jitter=0.3, pointpos=-1.8))
                    
                    fig_box.update_layout(
                        title='Distribuci√≥n de Satisfacci√≥n por G√©nero',
                        yaxis_title='Nivel de Satisfacci√≥n',
                        showlegend=True
                    )
                    
                    st.plotly_chart(fig_box, use_container_width=True, key="box_plot_genero_2")
                    
    # 1.6 Proporci√≥n
    with pruebas_tabs[5]:
        st.write("## 1.6 Prueba de Hip√≥tesis para una Proporci√≥n")
        
        st.write("""
        ### Ejemplo: Proporci√≥n de Visitantes Satisfechos
        
        Queremos probar si la proporci√≥n de visitantes satisfechos (calificaci√≥n ‚â• 4) es igual a 75%.
        
        **Hip√≥tesis:**
        
        H‚ÇÄ: œÄ = 0.75  
        H‚ÇÅ: œÄ ‚â† 0.75
        """)
        
        # Mostrar hip√≥tesis en LaTeX
        latex_copyable(r"H_0: \pi = 0.75", "h0_prop")
        latex_copyable(r"H_1: \pi \neq 0.75", "h1_prop")
        
        st.write("**Nivel de significancia:** Œ± = 0.05")
        
        # Calcular proporci√≥n muestral
        satisfechos = df[df['Satisfaccion'] >= 4].shape[0]
        total = df.shape[0]
        
        # Mostrar datos
        st.write("""### Datos Muestrales""")
        st.write(f"""
        - Total de visitantes (n): {total}
        - Visitantes satisfechos (x): {satisfechos}
        - Proporci√≥n muestral (pÃÇ): {satisfechos/total:.4f}
        - Proporci√≥n hipot√©tica (œÄ‚ÇÄ): 0.75
        """)
        
        if total == 0:
            st.error("Error: No hay datos suficientes.")
        else:
            # Calcular estad√≠sticos
            p_hat = satisfechos/total
            pi_0 = 0.75
            
            # Estad√≠stico Z
            denominador = np.sqrt(pi_0*(1-pi_0)/total)
            if denominador == 0:
                st.error("Error: No se puede calcular el estad√≠stico Z debido a una divisi√≥n por cero.")
            else:
                z_calc = (p_hat - pi_0)/denominador
                
                # Valores cr√≠ticos
                alpha = 0.05
                z_crit = stats.norm.ppf(1 - alpha/2)
                p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
                
                # Mostrar resultados
                st.write("### Resultados")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"""
                    **Datos:**
                    - Tama√±o de muestra (n) = {total}
                    - Visitantes satisfechos (x) = {satisfechos}
                    - Proporci√≥n muestral (pÃÇ) = {p_hat:.4f}
                    - Proporci√≥n hipot√©tica (œÄ‚ÇÄ) = {pi_0}
                    """)
                    
                with col2:
                    st.write(f"""
                    **Estad√≠sticos:**
                    - Z calculado = {z_calc:.4f}
                    - Z cr√≠tico = ¬±{z_crit:.4f}
                    - Valor p = {p_value:.4f}
                    """)
                
                # F√≥rmula del estad√≠stico
                st.write("### F√≥rmula del Estad√≠stico de Prueba")
                st.write("El estad√≠stico de prueba es:")
                formula = r"Z_c = \frac{\hat{p} - \pi_0}{\sqrt{\frac{\pi_0(1-\pi_0)}{n}}}"
                latex_copyable(formula, "z_prueba")
                
                st.write("Sustituyendo los valores:")
                latex_copyable(rf"Z_c = \frac{{{p_hat:.4f} - {pi_0:.4f}}}{{\sqrt{{\frac{{{pi_0:.4f}(1-{pi_0:.4f})}}{{{total}}}}}}} = {z_calc:.4f}", "z_prueba_calc")
                
                st.write("**Paso 3: Regi√≥n cr√≠tica**")
                st.write("Para una prueba bilateral con Œ± = 0.05:")
                latex_copyable(rf"Z_{{\alpha/2}} = \pm {z_crit:.4f}", "z_critico")
                
                st.write("La regi√≥n de rechazo es:")
                latex_copyable(rf"|Z_c| > Z_{{\alpha/2}} = {z_crit:.4f}", "region_rechazo")
                
                st.write("**Paso 4: Regla de decisi√≥n**")
                latex_copyable(r"\text{Rechazar } H_0 \text{ si } |Z_c| > Z_{\alpha/2}", "regla_decision")
                
                # Visualizaci√≥n
                st.write("### Visualizaci√≥n")
                
                # Crear datos para la distribuci√≥n normal
                x = np.linspace(-4, 4, 1000)
                y = stats.norm.pdf(x)
                
                # Crear figura
                fig = go.Figure()
                
                # Agregar la curva normal
                fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                                       line=dict(color='blue')))
                
                # √Åreas de rechazo
                # √Årea de rechazo derecha
                x_rej_der = x[x >= z_crit]
                y_rej_der = stats.norm.pdf(x_rej_der)
                fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                                       fill='tozeroy', 
                                       name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                                       line=dict(color='red', width=0)))
                
                x_rej_izq = x[x <= -z_crit]
                y_rej_izq = stats.norm.pdf(x_rej_izq)
                fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                                       fill='tozeroy', 
                                       name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                                       line=dict(color='red', width=0)))
                
                # Agregar l√≠nea vertical para el valor calculado
                fig.add_vline(x=z_calc, 
                            line_dash="dash", 
                            line_color="green",
                            annotation_text=f"Z calc = {z_calc:.4f}",
                            annotation_position="top")
                
                # Actualizar layout
                fig.update_layout(
                    title='Distribuci√≥n Normal Est√°ndar',
                    xaxis_title='Z',
                    yaxis_title='Densidad',
                    showlegend=True
                )
                
                st.plotly_chart(fig)
                
                # Conclusi√≥n
                st.write("### Paso 5: Conclusi√≥n")
                if abs(z_calc) > z_crit:
                    st.write(f"""
                    Como |Z_c| = {abs(z_calc):.4f} > {z_crit:.4f}, se rechaza H‚ÇÄ.
                    
                    **Interpretaci√≥n:**  
                    Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que 
                    la proporci√≥n de visitantes satisfechos es diferente del 75%.
                    """)
                else:
                    st.write(f"""
                    Como |Z_c| = {abs(z_calc):.4f} < {z_crit:.4f}, no se rechaza H‚ÇÄ.
                    
                    **Interpretaci√≥n:**  
                    Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que la proporci√≥n
                    de visitantes satisfechos es diferente del 75%.
                    """)
                
                st.write(f"p-valor = {p_value:.4f}")
                
    # 1.7 Diferencia de Proporciones
    with pruebas_tabs[6]:
        st.write("## 1.7 Prueba de Hip√≥tesis para la Diferencia de Proporciones")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        El centro recreativo desea evaluar si existe una diferencia significativa en la proporci√≥n 
        de visitantes satisfechos (calificaci√≥n ‚â• 4) entre hombres y mujeres.
        
        **Planteamiento:**
        - Variable de estudio: Satisfacci√≥n por g√©nero
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: œÄ‚ÇÅ - œÄ‚ÇÇ = 0 (La proporci√≥n de satisfacci√≥n es igual en ambos g√©neros)
        - H‚ÇÅ: œÄ‚ÇÅ - œÄ‚ÇÇ ‚â† 0 (Existe diferencia en la proporci√≥n de satisfacci√≥n entre g√©neros)
        
        **Tipo de Prueba:** Bilateral
        """)
        
        # C√°lculos
        # Grupo 1: Hombres
        df_hombres = df[df['Genero'] == 1]
        n1 = len(df_hombres)
        satisfechos_h = len(df_hombres[df_hombres['Satisfaccion'] >= 4])
        p1 = satisfechos_h / n1
        
        # Grupo 2: Mujeres
        df_mujeres = df[df['Genero'] == 2]
        n2 = len(df_mujeres)
        satisfechos_m = len(df_mujeres[df_mujeres['Satisfaccion'] >= 4])
        p2 = satisfechos_m / n2
        
        # Proporci√≥n combinada
        p_comb = (satisfechos_h + satisfechos_m) / (n1 + n2)
        
        # Estad√≠stico de prueba
        z_calc = (p1 - p2) / np.sqrt(p_comb * (1 - p_comb) * (1/n1 + 1/n2))
        
        # Valor cr√≠tico (bilateral)
        alpha = 0.05
        z_crit = stats.norm.ppf(1 - alpha/2)
        
        # P-valor
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Grupo 1 (Hombres):**
            - Tama√±o de muestra (n‚ÇÅ) = {n1}
            - Satisfechos (x‚ÇÅ) = {satisfechos_h}
            - Proporci√≥n (p‚ÇÅ) = {p1:.4f}
            
            **Grupo 2 (Mujeres):**
            - Tama√±o de muestra (n‚ÇÇ) = {n2}
            - Satisfechas (x‚ÇÇ) = {satisfechos_m}
            - Proporci√≥n (p‚ÇÇ) = {p2:.4f}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            - Proporci√≥n combinada = {p_comb:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("El estad√≠stico de prueba es:")
        formula = r"Z_{cal} = \frac{p_1 - p_2 - (\pi_1 - \pi_2)}{\sqrt{\hat{p}(1-\hat{p})(\frac{1}{n_1} + \frac{1}{n_2})}}"
        latex_copyable(formula, "z_dif_prop")
        
        st.write("Donde la proporci√≥n combinada pÃÇ se calcula como:")
        formula = rf"\hat{{p}} = \frac{{x_1 + x_2}}{{n_1 + n_2}} = \frac{{{satisfechos_h} + {satisfechos_m}}}{{{n1} + {n2}}} = {p_comb:.4f}"
        latex_copyable(formula, "p_comb")

        st.write("Sustituyendo los valores:")
        numerador = f"{p1:.4f} - {p2:.4f}"
        denominador = f"{p_comb:.4f}(1-{p_comb:.4f})"
        formula = rf"Z_{{cal}} = \frac{{{numerador}}}{{\sqrt{{{denominador}}} \cdot \sqrt{{\frac{{1}}{{{n1}}} + \frac{{1}}{{{n2}}}}}}} = {z_calc:.4f}"
        latex_copyable(formula, "z_dif_prop_calc")
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Diferencia de Proporciones',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_diferencia_proporciones")
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Conclusi√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que hay una 
            diferencia significativa en la proporci√≥n de visitantes satisfechos entre hombres y mujeres. 
            La diferencia observada de {abs(p1 - p2):.1%} puntos porcentuales es estad√≠sticamente significativa.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Conclusi√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que hay una 
            diferencia significativa en la proporci√≥n de visitantes satisfechos entre hombres y mujeres. 
            La diferencia observada de {abs(p1 - p2):.1%} puntos porcentuales no es estad√≠sticamente significativa.
            """)

    # 1.8 Varianza
    with pruebas_tabs[7]:
        st.write("## 1.8 Prueba de Hip√≥tesis para la Varianza")
        
        st.write("""
        ### Ejemplo: Variabilidad en la Satisfacci√≥n
        
        **Contexto del Problema:**  
        El centro recreativo desea evaluar si la varianza de la satisfacci√≥n de sus visitantes 
        es diferente de 1 punto cuadrado. Con una varianza muestral de 0.9609 y n = 30 participantes. 
        Se desea determinar si existe evidencia estad√≠stica suficiente para concluir que la varianza 
        poblacional es diferente de 1, lo cual ayudar√≠a a entender si la experiencia de los visitantes 
        es consistente o si hay una variabilidad significativa en sus niveles de satisfacci√≥n.
        
        **Planteamiento:**
        - Variable de estudio: Variabilidad en la satisfacci√≥n de los visitantes
        - Valor de referencia: œÉ¬≤ = 1 (varianza hipot√©tica)
        - Varianza muestral: s¬≤ = 0.9609
        - Tama√±o de muestra: n = 30
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**
        - H‚ÇÄ: œÉ¬≤ = 1 (La varianza poblacional es igual a 1)
        - H‚ÇÅ: œÉ¬≤ ‚â† 1 (La varianza poblacional es diferente de 1)
        
        **Tipo de Prueba:** Bilateral
        """)
        
        # C√°lculos
        n = len(df)
        s2 = df['Satisfaccion'].var()
        sigma2_0 = 1  # Varianza hipot√©tica
        alpha = 0.05
        
        # Valores cr√≠ticos (bilateral)
        chi2_crit_inf = stats.chi2.ppf(alpha/2, n - 1)
        chi2_crit_sup = stats.chi2.ppf(1 - alpha/2, n - 1)
        
        # Estad√≠stico de prueba
        chi2_calc = (n - 1) * s2 / sigma2_0
        
        # P-valor (bilateral)
        if chi2_calc <= n - 1:
            p_value = 2 * stats.chi2.cdf(chi2_calc, n - 1)
        else:
            p_value = 2 * (1 - stats.chi2.cdf(chi2_calc, n - 1))
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n chi-cuadrado
        x = np.linspace(stats.chi2.ppf(0.001, n - 1), stats.chi2.ppf(0.999, n - 1), 1000)
        y = stats.chi2.pdf(x, n - 1)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva chi-cuadrado
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Chi-Cuadrado',
                               line=dict(color='blue')))
        
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= chi2_crit_inf]
        y_rej_izq = stats.chi2.pdf(x_rej_izq, n - 1)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= chi2_crit_sup]
        y_rej_der = stats.chi2.pdf(x_rej_der, n - 1)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para chi2 calculado
        fig.add_vline(x=chi2_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"œá¬≤ calc = {chi2_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis Bilateral para la Varianza de la Satisfacci√≥n',
            xaxis_title='Estad√≠stico Chi-Cuadrado',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_varianza")
        
        # Resultados y f√≥rmulas
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Varianza muestral (s¬≤) = {s2:.4f}
            - Varianza hipot√©tica (œÉ‚ÇÄ¬≤) = {sigma2_0}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - œá¬≤ calculado = {chi2_calc:.4f}
            - œá¬≤ cr√≠tico inferior = {chi2_crit_inf:.4f}
            - œá¬≤ cr√≠tico superior = {chi2_crit_sup:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        st.write("### Resoluci√≥n Detallada")
        st.write("**1. F√≥rmula del Estad√≠stico de Prueba:**")
        formula = r"\chi^2 = \frac{(n-1)S^2}{\sigma_0^2}"
        latex_copyable(formula, "chi_var")
        
        st.write("**2. Sustituci√≥n de Valores:**")
        st.write(f"""
        Donde:
        - n = {n} (tama√±o de muestra)
        - S¬≤ = {s2:.4f} (varianza muestral)
        - œÉ‚ÇÄ¬≤ = {sigma2_0} (varianza hipot√©tica)
        """)
        
        # Paso a paso
        st.write("**3. Desarrollo:**")
        paso1 = rf"\chi^2 = \frac{{({n}-1)({s2:.4f})}}{{{sigma2_0}}}"
        latex_copyable(paso1, "paso1")
        
        paso2 = rf"\chi^2 = \frac{{{n-1} \cdot {s2:.4f}}}{{{sigma2_0}}}"
        latex_copyable(paso2, "paso2")
        
        paso3 = rf"\chi^2 = \frac{{{(n-1)*s2:.4f}}}{{{sigma2_0}}} = {chi2_calc:.4f}"
        latex_copyable(paso3, "paso3")
        
        st.write("**4. Decisi√≥n:**")
        if chi2_calc < chi2_crit_inf or chi2_calc > chi2_crit_sup:
            st.write(f"""
            Como œá¬≤ = {chi2_calc:.4f} est√° fuera del intervalo [{chi2_crit_inf:.4f}, {chi2_crit_sup:.4f}], 
            se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del {(1-alpha)*100}%, existe evidencia estad√≠stica suficiente para concluir que 
            la varianza poblacional es diferente de {sigma2_0} unidades cuadradas.
            """)
        else:
            st.write(f"""
            Como œá¬≤ = {chi2_calc:.4f} est√° dentro del intervalo [{chi2_crit_inf:.4f}, {chi2_crit_sup:.4f}], 
            no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del {(1-alpha)*100}%, no existe evidencia estad√≠stica suficiente para concluir que 
            la varianza poblacional es diferente de {sigma2_0} unidades cuadradas.
            """)
        
# Prueba de Signos: Importancia del Costo vs Preferencia
st.markdown("### Prueba de Signos: Importancia del Costo vs Preferencia")

st.markdown("""
Esta prueba no param√©trica nos permitir√° comparar si existe una diferencia significativa entre 
la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
""")

# Calcular las diferencias y los signos
diferencias = df['Importancia_Costo'] - df['Preferencia']
signos = np.sign(diferencias)

# Contar los signos positivos, negativos y ceros
n_pos = np.sum(signos > 0)
n_neg = np.sum(signos < 0)
n_ceros = np.sum(signos == 0)

# 2. Pruebas No Param√©tricas
with main_tabs[1]:
    st.header("2. Pruebas No Param√©tricas")
    
    # Crear subtabs para cada tipo de prueba no param√©trica
    no_param_tabs = st.tabs([
        "2.1 Prueba de Signos",
        "2.2 Prueba de Rachas"
    ])
    
    # 2.1 Prueba de signos
    with no_param_tabs[0]:
        st.write("## 2.1 Prueba de Signos")
        
        st.write("""
        ### Ejemplo: Importancia del Costo vs Preferencia
        
        Se desea analizar si existe una diferencia significativa entre la importancia que los visitantes 
        le dan al costo y su nivel de preferencia por el lugar. ¬øLa importancia del costo tiende a ser 
        diferente a la preferencia? Utilizaremos un nivel de significancia del 5%.
        """)
        
        # Datos fijos
        datos_fijos = {
            'Participante': list(range(1, 31)),
            'Satisfaccion': [5,5,4,5,2,4,4,4,4,5,4,4,4,4,4,5,4,4,4,2,5,2,4,5,2,5,4,4,2,4],
            'Racha': ['+','+','0','+','-','0','+','0','0','+','0','0','0','0','0','+','0','0','0','-','+','-','0','+','-','+','+','0','-','0']
        }
        
        df_rachas = pd.DataFrame(datos_fijos)
        
        # Mostrar informaci√≥n
        st.write("**Datos y Signos:**")
        st.write("Mediana de Satisfacci√≥n = 4.0")
        st.write(df_rachas)
        
        # Mostrar resultados
        st.write("### Prueba de Hip√≥tesis")
        
        st.write("""
        **Paso 1: Plantear Hip√≥tesis**
        - H‚ÇÄ: Me = 0 (No hay diferencia entre Importancia del Costo y Preferencia)
        - H‚ÇÅ: Me ‚â† 0 (S√≠ hay diferencia entre Importancia del Costo y Preferencia)
        """)
        
        st.write("**Paso 2: Nivel de Significancia**")
        alpha = 0.05
        st.write(f"Œ± = {alpha}")
        
        # Calcular probabilidad binomial
        r = min(n_pos, n_neg) if n_pos + n_neg > 0 else 0
        p_value = 2 * stats.binom.cdf(r, n_pos + n_neg, 0.5) if n_pos + n_neg > 0 else 1.0
        
        st.write(f"""
        **Paso 3: C√°lculo del P-valor**
        - r (m√≠nimo entre n‚Å∫ y n‚Åª) = {r}
        - n efectivo = {n_pos + n_neg}
        - P-valor = {p_value:.4f}
        """)
        
        st.write("### Conclusi√≥n")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que 
            s√≠ existe una diferencia significativa entre la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que exista 
            una diferencia significativa entre la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
            """)

        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Aproximaci√≥n normal para la distribuci√≥n binomial
        mu = (n_pos + n_neg) * 0.5  # media bajo H0
        sigma = np.sqrt((n_pos + n_neg) * 0.5 * 0.5)  # desviaci√≥n est√°ndar bajo H0
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(-4, 4, 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo derecha
        z_crit = 1.96
        z_calc = 3.2272
        alpha = 0.05
        
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Calcular el Z-score para el valor observado
        z_obs = (r - mu) / sigma
        
        # Agregar l√≠nea vertical para el valor observado
        fig.add_vline(x=z_obs, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z obs = {z_obs:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Signos (Aproximaci√≥n Normal)',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_prueba_signos")
        
    # 2.2 Prueba de rachas
    with no_param_tabs[1]:
        st.write("## 2.2 Prueba de Rachas")
        
        st.write("""
        ### Ejemplo: Aleatoriedad en la Satisfacci√≥n
        
        Se desea evaluar si los niveles de satisfacci√≥n de los visitantes siguen un patr√≥n aleatorio 
        o si existe alguna tendencia. Utilizaremos la mediana como punto de referencia para determinar 
        las rachas. Nivel de significancia: 5%.
        """)
        
        # Datos fijos
        datos = pd.DataFrame({
            'Participante': [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
            'Satisfaccion': [5,5,4,5,2,4,4,4,4,5,4,4,4,4,4,5,4,4,4,2,5,2,4,5,2,5,4,4,2,4],
            'Racha': ['+','+','0','+','-','0','+','0','0','+','0','0','0','0','0','+','0','0','0','-','+','-','0','+','-','+','+','0','-','0']
        })
        
        # Mostrar tabla de datos
        st.write("**Datos y Signos:**")
        st.write("Mediana de Satisfacci√≥n = 4.0")
        st.dataframe(datos)
        
        # Mostrar resultados de la prueba
        st.write("### Prueba de Hip√≥tesis")
        
        st.write("""
        **Paso 1: Plantear Hip√≥tesis**
        - H‚ÇÄ: La secuencia es aleatoria
        - H‚ÇÅ: La secuencia no es aleatoria
        
        **Paso 2: Estad√≠sticos**
        - N√∫mero de rachas (R) = 12
        - n‚ÇÅ (‚â• mediana) = 7
        - n‚ÇÇ (< mediana) = 5
        - Z cr√≠tico = ¬±1.96
        """)
        
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("""
            **Estad√≠sticos calculados:**
            - N√∫mero esperado de rachas (E[R]): 6.8333
            - Varianza de las rachas (Var[R]): 2.5631
            - Valor calculado de z: 3.2272
            """)
        
        # F√≥rmulas en LaTeX
        st.write("### F√≥rmulas utilizadas")
        st.write("**N√∫mero esperado de rachas:**")
        latex_copyable(r"E[R] = 1 + \frac{2n_1n_2}{n_1 + n_2}", "formula_er")
        st.write("**Resoluci√≥n E[R]:**")
        latex_copyable(r"E[R] = 1 + \frac{2(7)(5)}{7 + 5} = 1 + \frac{70}{12} = 6.8333", "rachas_er_resolucion")
        
        st.write("**Varianza de las rachas:**")
        latex_copyable(r"Var[R] = \frac{2n_1n_2(2n_1n_2 - n_1 - n_2)}{(n_1 + n_2)^2(n_1 + n_2 - 1)}", "formula_var")
        st.write("**Resoluci√≥n Var[R]:**")
        latex_copyable(r"Var[R] = \frac{2(7)(5)(2(7)(5) - 7 - 5)}{(7 + 5)^2(7 + 5 - 1)} = \frac{70(70 - 12)}{144(11)} = 2.5631", "rachas_var_resolucion")
        
        st.write("**Estad√≠stico Z:**")
        latex_copyable(r"Z = \frac{R - E[R]}{\sqrt{Var[R]}}", "formula_z")
        
        st.write("**Resoluci√≥n:**")
        latex_copyable(r"Z = \frac{12 - 6.8333}{\sqrt{2.5631}} = 3.2272", "resolucion_z")
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(-4, 4, 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -1.96]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {0.05/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= 1.96]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {0.05/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para z calculado
        fig.add_vline(x=3.2272, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z calc = {3.2272:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Rachas',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Interpretaci√≥n
        st.write("### Conclusi√≥n")
        st.write("""
        |z| = 3.2272 > 1.96, se rechaza la hip√≥tesis nula (H‚ÇÄ).
        
        **Conclusi√≥n:** Existe evidencia suficiente para afirmar que la secuencia NO es aleatoria.
        """)