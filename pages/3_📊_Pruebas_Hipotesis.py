import streamlit as st
import numpy as np
from scipy import stats
import plotly.graph_objects as go
import pandas as pd
from pathlib import Path

def latex_copyable(formula, label=""):
    """Muestra una f√≥rmula LaTeX con un bot√≥n para copiar."""
    col1, col2 = st.columns([4, 1])
    with col1:
        st.latex(formula)
    with col2:
        if st.button(f"üìã Copiar", key=f"copy_{label}"):
            try:
                st.code(formula, language="latex")
                st.toast("¬°F√≥rmula mostrada! Puedes copiarla desde el bloque de c√≥digo", icon="‚úÖ")
            except Exception as e:
                st.error(f"Error al mostrar la f√≥rmula: {str(e)}")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Pruebas de Hip√≥tesis",
    page_icon="üìä",
    layout="wide"
)

# Funci√≥n para cargar datos
@st.cache_data(ttl=0)
def cargar_datos():
    ruta_base = Path(__file__).parent.parent
    ruta_datos = ruta_base / 'data' / 'encuesta_recreacion_numerica.csv'
    df = pd.read_csv(ruta_datos)
    return df

# Cargar datos
df = cargar_datos()

# Configuraci√≥n de variables
config_variables = {
    'Edad': {
        'descripcion': 'la edad',
        'unidad': 'a√±os',
        'periodo': ''
    },
    'Frecuencia_Visitas': {
        'descripcion': 'la frecuencia de visitas',
        'unidad': 'veces',
        'periodo': 'por mes'
    },
    'Satisfaccion': {
        'descripcion': 'el nivel de satisfacci√≥n',
        'unidad': 'puntos',
        'periodo': ''
    },
    'Preferencia': {
        'descripcion': 'el nivel de preferencia',
        'unidad': 'puntos',
        'periodo': ''
    }
}

# T√≠tulo principal
st.title("CAP√çTULO 3: Pruebas de Hip√≥tesis")

# Crear pesta√±as principales
main_tabs = st.tabs([
    "1. Pruebas de Hip√≥tesis Estad√≠stica",
    "2. Pruebas No Param√©tricas"
])

# 1. Pruebas de Hip√≥tesis Estad√≠stica
with main_tabs[0]:
    st.header("1. Pruebas de Hip√≥tesis Estad√≠stica")
    
    # Crear subtabs para cada tipo de prueba
    pruebas_tabs = st.tabs([
        "1.1 Media (œÉ¬≤ conocida)",
        "1.2 Media (œÉ¬≤ desconocida)",
        "1.3 Diferencia de Medias (œÉ¬≤ conocida)",
        "1.4 Diferencia de Medias (œÉ¬≤ desconocida iguales)",
        "1.5 Diferencia de Medias (œÉ¬≤ desconocida diferentes)",
        "1.6 Proporci√≥n",
        "1.7 Diferencia de Proporciones",
        "1.8 Varianza"
    ])
    
    # 1.1 Media con varianza conocida
    with pruebas_tabs[0]:
        st.write("## 1.1 Prueba de Hip√≥tesis para la Media (œÉ¬≤ conocida)")
        
        st.write("""
        ### Ejemplo: Edad Promedio de Visitantes
        
        **Contexto del Problema:**  
        Estudios previos en centros recreativos similares han determinado que la edad promedio de los 
        visitantes es de 25 a√±os, con una desviaci√≥n est√°ndar poblacional conocida de 5 a√±os. El 
        administrador de "Aventura Park" cree que la edad promedio de sus visitantes es diferente 
        y desea verificar esta afirmaci√≥n.
        
        **Planteamiento:**
        - Variable de estudio: Edad de los visitantes
        - Tama√±o de muestra: 30 visitantes
        - Desviaci√≥n est√°ndar poblacional (œÉ): 5 a√±os
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº = 25 (La edad promedio de los visitantes es igual a 25 a√±os)
        - H‚ÇÅ: Œº ‚â† 25 (La edad promedio de los visitantes es diferente de 25 a√±os)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Edad'
        mu0 = 25  # Valor hipot√©tico fijo
        sigma = 5  # Desviaci√≥n est√°ndar poblacional conocida
        alpha = 0.05  # Nivel de significancia fijo
        
        # Estad√≠sticos de la muestra
        n = len(df[variable])
        media_muestral = df[variable].mean()
        z_calc = (media_muestral - mu0) / (sigma / np.sqrt(n))
        
        # Valores cr√≠ticos para prueba bilateral
        z_crit = stats.norm.ppf(1 - alpha/2)
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Media muestral (xÃÑ) = {media_muestral:.2f} a√±os
            - Valor a probar (Œº‚ÇÄ) = {mu0:.2f} a√±os
            - Desviaci√≥n est√°ndar poblacional (œÉ) = {sigma:.2f}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como la varianza poblacional es conocida, usamos la distribuci√≥n normal Z:")
        formula = r"Z = \frac{\bar{x} - \mu_0}{\sigma/\sqrt{n}}"
        latex_copyable(formula, "z_media")
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral (xÃÑ) = {media_muestral:.4f}
        - Media hipot√©tica (Œº‚ÇÄ) = {mu0:.4f}
        - Desviaci√≥n est√°ndar poblacional (œÉ) = {sigma:.4f}
        - Tama√±o de muestra (n) = {n}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"Z = \frac{{{media_muestral:.4f} - {mu0:.4f}}}{{{sigma:.4f}/\sqrt{{{n}}}}} = \frac{{{media_muestral-mu0:.4f}}}{{{sigma/np.sqrt(n):.4f}}} = {z_calc:.4f}"
        latex_copyable(sustitucion, "z_media_calc")
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |Z| = |{z_calc:.4f}|
        Valor cr√≠tico = ¬±{z_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que la edad 
            promedio de los visitantes en Aventura Park es diferente de 25 a√±os. Espec√≠ficamente, la edad promedio 
            observada es de {media_muestral:.2f} a√±os, lo que indica que los visitantes son {"m√°s j√≥venes" if media_muestral < mu0 else "mayores"} 
            que lo t√≠picamente observado en centros recreativos similares.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que la edad 
            promedio de los visitantes en Aventura Park es diferente de 25 a√±os. La edad promedio observada de 
            {media_muestral:.2f} a√±os no es estad√≠sticamente diferente de lo t√≠picamente observado en centros recreativos similares.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para Z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"Z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Media de Edad',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_media_edad")
        
    # 1.2 Media con varianza desconocida
    with pruebas_tabs[1]:
        st.write("## 1.2 Prueba de Hip√≥tesis para la Media (œÉ¬≤ desconocida)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n en Centro Recreativo
        
        **Contexto del Problema:**  
        El centro recreativo "Aventura Park" ha estado monitoreando la satisfacci√≥n de sus visitantes 
        en una escala del 1 al 5. La administraci√≥n del parque ha establecido como est√°ndar de calidad 
        un nivel de satisfacci√≥n de 4 puntos. El equipo de gesti√≥n desea verificar si el nivel actual 
        de satisfacci√≥n es diferente del est√°ndar establecido.
        
        **Planteamiento:**
        - Variable de estudio: Nivel de satisfacci√≥n de los visitantes
        - Tama√±o de muestra: 30 visitantes
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº = 4 (El nivel promedio de satisfacci√≥n es igual a 4 puntos)
        - H‚ÇÅ: Œº ‚â† 4 (El nivel promedio de satisfacci√≥n es diferente de 4 puntos)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Satisfaccion'
        mu0 = 4  # Valor hipot√©tico fijo
        alpha = 0.05  # Nivel de significancia fijo
        
        # Estad√≠sticos de la muestra
        n = len(df[variable])
        media_muestral = df[variable].mean()
        s = df[variable].std()  # Desviaci√≥n est√°ndar muestral
        gl = n - 1  # Grados de libertad
        t_calc = (media_muestral - mu0) / (s / np.sqrt(n))
        
        # Valores cr√≠ticos para prueba bilateral
        t_crit = stats.t.ppf(1 - alpha/2, gl)
        p_value = 2 * (1 - stats.t.cdf(abs(t_calc), gl))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Media muestral (xÃÑ) = {media_muestral:.2f} puntos
            - Valor a probar (Œº‚ÇÄ) = {mu0:.2f} puntos
            - Desviaci√≥n est√°ndar muestral (s) = {s:.2f}
            - Grados de libertad (gl) = {gl}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - t calculado = {t_calc:.4f}
            - t cr√≠tico = ¬±{t_crit:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como la varianza poblacional es desconocida y n ‚â§ 30, usamos la distribuci√≥n t-Student:")
        formula = r"t = \frac{\bar{x} - \mu_0}{s/\sqrt{n}}"
        latex_copyable(formula, "t_media_12")  # Cambiado de "t_media" a "t_media_12"
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral (xÃÑ) = {media_muestral:.4f}
        - Media hipot√©tica (Œº‚ÇÄ) = {mu0:.4f}
        - Desviaci√≥n est√°ndar muestral (s) = {s:.4f}
        - Tama√±o de muestra (n) = {n}
        - Grados de libertad (gl) = {gl}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"t = \frac{{{media_muestral:.4f} - {mu0:.4f}}}{{{s:.4f}/\sqrt{{{n}}}}} = \frac{{{media_muestral-mu0:.4f}}}{{{s/np.sqrt(n):.4f}}} = {t_calc:.4f}"
        latex_copyable(sustitucion, "t_media_calc_12")  # Cambiado para ser √∫nico
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |t| = |{t_calc:.4f}|
        Valor cr√≠tico = ¬±{t_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. Espec√≠ficamente, el nivel promedio 
            de satisfacci√≥n observado es de {media_muestral:.2f} puntos, lo que sugiere que el centro recreativo 
            {"no est√° alcanzando" if media_muestral < mu0 else "est√° superando"} el est√°ndar establecido.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. El nivel promedio observado de 
            {media_muestral:.2f} puntos no es estad√≠sticamente diferente del est√°ndar establecido.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n t
        x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
        y = stats.t.pdf(x, gl)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva t
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -t_crit]
        y_rej_izq = stats.t.pdf(x_rej_izq, gl)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= t_crit]
        y_rej_der = stats.t.pdf(x_rej_der, gl)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para t calculado
        fig.add_vline(x=t_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"t calc = {t_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Media de Satisfacci√≥n',
            xaxis_title='Estad√≠stico t',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_media_satisfaccion")
        
    # 1.3 Diferencia de medias con varianza conocida
    with pruebas_tabs[2]:
        st.write("## 1.3 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ conocida)")
        
        st.write("""
        ### Ejemplo: Frecuencia de Visitas por Grupos de Edad
        
        **Contexto del Problema:**  
        El administrador de Aventura Park quiere comparar la frecuencia de visitas entre dos grupos: 
        j√≥venes (‚â§ 25 a√±os) y adultos (> 25 a√±os). Estudios previos han determinado que la desviaci√≥n 
        est√°ndar de la frecuencia de visitas es de 1.5 visitas/mes para ambos grupos. Se desea verificar 
        si existe una diferencia significativa en la frecuencia de visitas entre estos grupos.
        
        **Planteamiento:**
        - Variable: Frecuencia de visitas mensuales
        - Grupos:
          * Grupo 1: Visitantes ‚â§ 25 a√±os
          * Grupo 2: Visitantes > 25 a√±os
        - Desviaci√≥n est√°ndar conocida (œÉ‚ÇÅ = œÉ‚ÇÇ = 1.5 visitas/mes)
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº‚ÇÅ - Œº‚ÇÇ = 0 (No hay diferencia en la frecuencia de visitas entre grupos)
        - H‚ÇÅ: Œº‚ÇÅ - Œº‚ÇÇ ‚â† 0 (Existe diferencia en la frecuencia de visitas entre grupos)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Frecuencia_Visitas'
        sigma = 1.5  # Desviaci√≥n est√°ndar poblacional conocida
        alpha = 0.05  # Nivel de significancia fijo
        
        # Crear los grupos
        grupo1 = df[df['Edad'] <= 25][variable]
        grupo2 = df[df['Edad'] > 25][variable]
        
        # Estad√≠sticos de las muestras
        n1 = len(grupo1)
        n2 = len(grupo2)
        media1 = grupo1.mean()
        media2 = grupo2.mean()
        
        # C√°lculo del estad√≠stico Z
        z_calc = (media1 - media2) / np.sqrt((sigma**2/n1) + (sigma**2/n2))
        
        # Valores cr√≠ticos para prueba bilateral
        z_crit = stats.norm.ppf(1 - alpha/2)
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos Grupo 1 (‚â§ 25 a√±os):**
            - Tama√±o de muestra (n‚ÇÅ) = {n1}
            - Media muestral (xÃÑ‚ÇÅ) = {media1:.2f} visitas/mes
            
            **Datos Grupo 2 (> 25 a√±os):**
            - Tama√±o de muestra (n‚ÇÇ) = {n2}
            - Media muestral (xÃÑ‚ÇÇ) = {media2:.2f} visitas/mes
            
            **Par√°metros:**
            - Desviaci√≥n est√°ndar (œÉ‚ÇÅ = œÉ‚ÇÇ) = {sigma:.2f}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            
            **Diferencia de medias:**
            - xÃÑ‚ÇÅ - xÃÑ‚ÇÇ = {media1 - media2:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como las varianzas poblacionales son conocidas e iguales, usamos la distribuci√≥n normal Z:")
        formula = r"Z = \frac{(\bar{x}_1 - \bar{x}_2) - (\mu_1 - \mu_2)_0}{\sqrt{\frac{\sigma_1^2}{n_1} + \frac{\sigma_2^2}{n_2}}}"
        latex_copyable(formula, "z_diff_medias")
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral grupo 1 (xÃÑ‚ÇÅ) = {media1:.4f}
        - Media muestral grupo 2 (xÃÑ‚ÇÇ) = {media2:.4f}
        - Diferencia hipot√©tica (Œº‚ÇÅ - Œº‚ÇÇ)‚ÇÄ = 0
        - Desviaci√≥n est√°ndar (œÉ‚ÇÅ = œÉ‚ÇÇ) = {sigma:.4f}
        - Tama√±os de muestra: n‚ÇÅ = {n1}, n‚ÇÇ = {n2}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"Z = \frac{{({media1:.4f} - {media2:.4f}) - 0}}{{\sqrt{{\frac{{{sigma:.4f}^2}}{{{n1}}} + \frac{{{sigma:.4f}^2}}{{{n2}}}}}}} = \frac{{{media1-media2:.4f}}}{{{np.sqrt((sigma**2/n1) + (sigma**2/n2)):.4f}}} = {z_calc:.4f}"
        latex_copyable(sustitucion, "z_diff_medias_calc")
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |Z| = |{z_calc:.4f}|
        Valor cr√≠tico = ¬±{z_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que hay 
            una diferencia significativa en la frecuencia de visitas entre los grupos de edad. El grupo 
            {"joven (‚â§ 25 a√±os)" if media1 > media2 else "adulto (> 25 a√±os)"} tiene una frecuencia promedio 
            mayor de visitas ({max(media1, media2):.2f} visitas/mes vs {min(media1, media2):.2f} visitas/mes).
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que hay 
            una diferencia significativa en la frecuencia de visitas entre los grupos de edad. Aunque el grupo 
            {"joven (‚â§ 25 a√±os)" if media1 > media2 else "adulto (> 25 a√±os)"} tiene una frecuencia promedio 
            ligeramente mayor ({max(media1, media2):.2f} visitas/mes vs {min(media1, media2):.2f} visitas/mes), 
            esta diferencia no es estad√≠sticamente significativa.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para Z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"Z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Diferencia de Medias en Frecuencia de Visitas',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_diferencia_medias")
        
        # Mostrar box plot de comparaci√≥n
        st.write("### Comparaci√≥n de Grupos")
        fig_box = go.Figure()
        
        fig_box.add_trace(go.Box(y=grupo1, name='‚â§ 25 a√±os',
                                boxpoints='all', jitter=0.3, pointpos=-1.8))
        fig_box.add_trace(go.Box(y=grupo2, name='> 25 a√±os',
                                boxpoints='all', jitter=0.3, pointpos=-1.8))
        
        fig_box.update_layout(
            title='Distribuci√≥n de Frecuencia de Visitas por Grupo de Edad',
            yaxis_title='Frecuencia de Visitas (por mes)',
            showlegend=True
        )
        
        st.plotly_chart(fig_box, use_container_width=True, key="plot_comparacion_grupos")
        
    # 1.4 Diferencia de medias con varianza desconocida iguales
    with pruebas_tabs[3]:
        st.write("## 1.4 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ desconocida iguales)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        El administrador de Aventura Park ha estado monitoreando la satisfacci√≥n de sus visitantes 
        en una escala del 1 al 5. La administraci√≥n del parque ha establecido como est√°ndar de calidad 
        un nivel de satisfacci√≥n de 4 puntos. El equipo de gesti√≥n desea verificar si el nivel actual 
        de satisfacci√≥n es diferente del est√°ndar establecido.
        
        **Planteamiento:**
        - Variable de estudio: Nivel de satisfacci√≥n de los visitantes
        - Tama√±o de muestra: 30 visitantes
        - Nivel de significancia (Œ±): 0.05
        
        **Hip√≥tesis:**  
        - H‚ÇÄ: Œº = 4 (El nivel promedio de satisfacci√≥n es igual a 4 puntos)
        - H‚ÇÅ: Œº ‚â† 4 (El nivel promedio de satisfacci√≥n es diferente de 4 puntos)
        
        **Tipo de Prueba:** Bilateral (nos interesa detectar diferencias en ambas direcciones)
        """)
        
        # C√°lculos con valores fijos
        variable = 'Satisfaccion'
        mu0 = 4  # Valor hipot√©tico fijo
        alpha = 0.05  # Nivel de significancia fijo
        
        # Estad√≠sticos de la muestra
        n = len(df[variable])
        media_muestral = df[variable].mean()
        s = df[variable].std()  # Desviaci√≥n est√°ndar muestral
        gl = n - 1  # Grados de libertad
        t_calc = (media_muestral - mu0) / (s / np.sqrt(n))
        
        # Valores cr√≠ticos para prueba bilateral
        t_crit = stats.t.ppf(1 - alpha/2, gl)
        p_value = 2 * (1 - stats.t.cdf(abs(t_calc), gl))
        
        # Mostrar resultados
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Datos:**
            - Tama√±o de muestra (n) = {n}
            - Media muestral (xÃÑ) = {media_muestral:.2f} puntos
            - Valor a probar (Œº‚ÇÄ) = {mu0:.2f} puntos
            - Desviaci√≥n est√°ndar muestral (s) = {s:.2f}
            - Grados de libertad (gl) = {gl}
            - Nivel de significancia (Œ±) = {alpha}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - t calculado = {t_calc:.4f}
            - t cr√≠tico = ¬±{t_crit:.4f}
            - Valor p = {p_value:.4f}
            """)
        
        # F√≥rmula del estad√≠stico
        st.write("### F√≥rmula del Estad√≠stico de Prueba")
        st.write("Como la varianza poblacional es desconocida y n ‚â§ 30, usamos la distribuci√≥n t-Student:")
        formula = r"t = \frac{\bar{x} - \mu_0}{s/\sqrt{n}}"
        latex_copyable(formula, "t_media")
        
        # Resoluci√≥n paso a paso
        st.write("### Resoluci√≥n")
        st.write("**Paso 1: Identificar los valores**")
        st.write(f"""
        - Media muestral (xÃÑ) = {media_muestral:.4f}
        - Media hipot√©tica (Œº‚ÇÄ) = {mu0:.4f}
        - Desviaci√≥n est√°ndar muestral (s) = {s:.4f}
        - Tama√±o de muestra (n) = {n}
        - Grados de libertad (gl) = {gl}
        """)
        
        st.write("**Paso 2: Sustituir en la f√≥rmula**")
        sustitucion = rf"t = \frac{{{media_muestral:.4f} - {mu0:.4f}}}{{{s:.4f}/\sqrt{{{n}}}}} = \frac{{{media_muestral-mu0:.4f}}}{{{s/np.sqrt(n):.4f}}} = {t_calc:.4f}"
        latex_copyable(sustitucion, "t_media_calc")
        
        st.write("**Paso 3: Comparar con el valor cr√≠tico**")
        st.write(f"""
        |t| = |{t_calc:.4f}|
        Valor cr√≠tico = ¬±{t_crit:.4f}
        """)
        
        st.write("**Paso 4: Decisi√≥n e Interpretaci√≥n**")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. Espec√≠ficamente, el nivel promedio 
            de satisfacci√≥n observado es de {media_muestral:.2f} puntos, lo que sugiere que el centro recreativo 
            {"no est√° alcanzando" if media_muestral < mu0 else "est√° superando"} el est√°ndar establecido.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que el nivel 
            promedio de satisfacci√≥n en Aventura Park es diferente de 4 puntos. El nivel promedio observado de 
            {media_muestral:.2f} puntos no es estad√≠sticamente diferente del est√°ndar establecido.
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n t
        x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
        y = stats.t.pdf(x, gl)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva t
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -t_crit]
        y_rej_izq = stats.t.pdf(x_rej_izq, gl)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= t_crit]
        y_rej_der = stats.t.pdf(x_rej_der, gl)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para t calculado
        fig.add_vline(x=t_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"t calc = {t_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Media de Satisfacci√≥n',
            xaxis_title='Estad√≠stico t',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_media_satisfaccion_2")
        
    # 1.5 Diferencia de medias con varianza desconocida diferentes
    with pruebas_tabs[4]:
        st.write("## 1.5 Prueba de Hip√≥tesis para la Diferencia de Medias (œÉ¬≤ desconocida diferentes)")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        Se realiz√≥ una encuesta para determinar si existe diferencia en la satisfacci√≥n entre hombres y mujeres 
        en el centro recreativo, suponiendo que las poblaciones son normales pero con varianzas diferentes.
        """)

        # C√°lculos con nuestros datos
        grupo1 = df[df['Genero'] == 1]['Satisfaccion']  # Hombres
        grupo2 = df[df['Genero'] == 2]['Satisfaccion']  # Mujeres
        
        n1 = len(grupo1)
        n2 = len(grupo2)
        x1 = grupo1.mean()
        x2 = grupo2.mean()
        s1_2 = grupo1.var()  # varianza grupo 1
        s2_2 = grupo2.var()  # varianza grupo 2
        alpha = 0.05  # Cambiado de 0.1 a 0.05
        
        st.write(f"""
        **Datos:**
        Grupo 1: Hombres
        - n‚ÇÅ = {n1}
        - xÃÑ‚ÇÅ = {x1:.2f}
        - s‚ÇÅ¬≤ = {s1_2:.2f}

        Grupo 2: Mujeres
        - n‚ÇÇ = {n2}
        - xÃÑ‚ÇÇ = {x2:.2f}
        - s‚ÇÇ¬≤ = {s2_2:.2f}
        """)

        st.write("""
        **Hip√≥tesis:**
        - H‚ÇÄ: Œº‚ÇÅ = Œº‚ÇÇ (La satisfacci√≥n promedio es igual entre hombres y mujeres)
        - H‚ÇÅ: Œº‚ÇÅ ‚â† Œº‚ÇÇ (La satisfacci√≥n promedio es diferente entre hombres y mujeres)
        """)

        # Paso 3: Estad√≠stico de prueba
        t_calc = (x1 - x2) / np.sqrt(s1_2/n1 + s2_2/n2)
        
        # Paso 6: Grados de libertad (Welch-Satterthwaite)
        v = ((s1_2/n1 + s2_2/n2)**2) / (((s1_2/n1)**2)/(n1-1) + ((s2_2/n2)**2)/(n2-1))
        gl = int(np.floor(v))

        # Paso 4: Valor cr√≠tico
        t_crit = stats.t.ppf(1 - alpha/2, gl)

        # P-valor
        p_value = 2 * (1 - stats.t.cdf(abs(t_calc), gl))

        # Mostrar resultados paso a paso
        st.write("### Resoluci√≥n")
        
        st.write("**Paso 1: Plantear Hip√≥tesis**")
        st.write("H‚ÇÄ: Œº‚ÇÅ = Œº‚ÇÇ vs H‚ÇÅ: Œº‚ÇÅ ‚â† Œº‚ÇÇ")
        
        st.write("**Paso 2: Nivel de Significancia**")
        st.write(f"Œ± = {alpha} (5%)")
        
        # Calcular las diferencias y los signos para la primera prueba
        diferencias_primera = df['Satisfaccion'] - df['Importancia_Costo']
        signos_primera = np.sign(diferencias_primera)
        n_pos_primera = np.sum(signos_primera > 0)
        n_neg_primera = np.sum(signos_primera < 0)
        n_ceros_primera = np.sum(signos_primera == 0)
        n_efectivo = len(signos_primera) - n_ceros_primera
        
        # Calcular probabilidad binomial
        r = min(n_pos_primera, n_neg_primera) if n_efectivo > 0 else 0
        p_value = 2 * stats.binom.cdf(r, n_efectivo, 0.5) if n_efectivo > 0 else 1.0
        
        st.write(f"""
        **Paso 3: C√°lculo del P-valor**
        - r (m√≠nimo entre n‚Å∫ y n‚Åª) = {r}
        - n efectivo = {n_efectivo}
        - P-valor = {p_value:.4f}
        """)
        
        st.write("### Conclusi√≥n")
        if p_value < alpha:
            st.write(f"""
            Con un nivel de significancia del 5%, existe suficiente evidencia estad√≠stica para rechazar 
            la hip√≥tesis nula. Por lo tanto, podemos concluir que s√≠ existe una diferencia significativa 
            entre la satisfacci√≥n de los visitantes y la importancia que le dan al costo.
            """)
        else:
            st.write(f"""
            Con un nivel de significancia del 5%, no existe suficiente evidencia estad√≠stica para rechazar 
            la hip√≥tesis nula. Por lo tanto, no podemos concluir que exista una diferencia significativa 
            entre la satisfacci√≥n de los visitantes y la importancia que le dan al costo.
            """)

        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n t
        x = np.linspace(stats.t.ppf(0.001, gl), stats.t.ppf(0.999, gl), 1000)
        y = stats.t.pdf(x, gl)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva t
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n t-Student',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -t_crit]
        y_rej_izq = stats.t.pdf(x_rej_izq, gl)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= t_crit]
        y_rej_der = stats.t.pdf(x_rej_der, gl)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para t calculado
        fig.add_vline(x=t_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"t calc = {t_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Diferencia de Medias (Varianzas Diferentes)',
            xaxis_title='Estad√≠stico t',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_diferencia_medias_varianzas_diferentes")
        
    # 1.6 Proporci√≥n
    with pruebas_tabs[5]:
        st.write("## 1.6 Prueba de Hip√≥tesis para una Proporci√≥n")
        
        st.write("""
        ### Ejemplo: Proporci√≥n de Visitantes Satisfechos
        
        **Contexto del Problema:**  
        El centro recreativo desea evaluar si la proporci√≥n de visitantes satisfechos 
        (aquellos que calificaron su satisfacci√≥n como 4 o 5) es mayor al 70%.
        
        **Planteamiento:**
        - Variable de estudio: Satisfacci√≥n (4 o 5 = Satisfecho)
        - Tama√±o de muestra: 30 visitantes
        - Nivel de significancia (Œ±): 0.05
        """)
        
        # C√°lculos
        n = len(df)
        satisfechos = len(df[df['Satisfaccion'] >= 4])
        p_muestra = satisfechos / n
        p0 = 0.70  # Proporci√≥n hipot√©tica
        alpha = 0.05
        
        # Estad√≠stico de prueba
        z_calc = (p_muestra - p0) / np.sqrt(p0 * (1 - p0) / n)
        
        # Valor cr√≠tico
        z_crit = stats.norm.ppf(1 - alpha)  # Prueba unilateral derecha
        
        # P-valor
        p_value = 1 - stats.norm.cdf(z_calc)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Årea de rechazo (cola derecha)
        x_rej = x[x >= z_crit]
        y_rej = stats.norm.pdf(x_rej)
        fig.add_trace(go.Scatter(x=x_rej, y=y_rej, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ± = {alpha:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Proporci√≥n de Visitantes Satisfechos',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_proporcion")
        
    # 1.7 Diferencia de Proporciones
    with pruebas_tabs[6]:
        st.write("## 1.7 Prueba de Hip√≥tesis para la Diferencia de Proporciones")
        
        st.write("""
        ### Ejemplo: Satisfacci√≥n por G√©nero
        
        **Contexto del Problema:**  
        El centro recreativo desea evaluar si existe una diferencia significativa en la proporci√≥n 
        de visitantes satisfechos (calificaci√≥n ‚â• 4) entre hombres y mujeres.
        
        **Planteamiento:**
        - Variable de estudio: Satisfacci√≥n por g√©nero
        - Nivel de significancia (Œ±): 0.05
        """)
        
        # C√°lculos
        # Grupo 1: Hombres
        df_hombres = df[df['Genero'] == 1]
        n1 = len(df_hombres)
        satisfechos_h = len(df_hombres[df_hombres['Satisfaccion'] >= 4])
        p1 = satisfechos_h / n1
        
        # Grupo 2: Mujeres
        df_mujeres = df[df['Genero'] == 2]
        n2 = len(df_mujeres)
        satisfechos_m = len(df_mujeres[df_mujeres['Satisfaccion'] >= 4])
        p2 = satisfechos_m / n2
        
        # Proporci√≥n combinada
        p_comb = (satisfechos_h + satisfechos_m) / (n1 + n2)
        
        # Estad√≠stico de prueba
        z_calc = (p1 - p2) / np.sqrt(p_comb * (1 - p_comb) * (1/n1 + 1/n2))
        
        # Valor cr√≠tico (bilateral)
        alpha = 0.05
        z_crit = stats.norm.ppf(1 - alpha/2)
        
        # P-valor
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        st.write("### Resultados")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"""
            **Grupo 1 (Hombres):**
            - Tama√±o de muestra (n‚ÇÅ) = {n1}
            - Satisfechos = {satisfechos_h}
            - Proporci√≥n (p‚ÇÅ) = {p1:.4f}
            
            **Grupo 2 (Mujeres):**
            - Tama√±o de muestra (n‚ÇÇ) = {n2}
            - Satisfechos = {satisfechos_m}
            - Proporci√≥n (p‚ÇÇ) = {p2:.4f}
            """)
            
        with col2:
            st.write(f"""
            **Estad√≠sticos:**
            - Z calculado = {z_calc:.4f}
            - Z cr√≠tico = ¬±{z_crit:.4f}
            - Valor p = {p_value:.4f}
            - Proporci√≥n combinada = {p_comb:.4f}
            """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(stats.norm.ppf(0.001), stats.norm.ppf(0.999), 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        # √Årea de rechazo izquierda
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # √Årea de rechazo derecha
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Diferencia de Proporciones',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_diferencia_proporciones")
        
        # Interpretaci√≥n
        st.write("### Interpretaci√≥n")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Conclusi√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que 
            hay una diferencia significativa en la proporci√≥n de visitantes satisfechos entre hombres y mujeres. 
            La diferencia observada de {abs(p1 - p2):.1%} puntos porcentuales es estad√≠sticamente significativa.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Conclusi√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que hay 
            una diferencia significativa en la proporci√≥n de visitantes satisfechos entre hombres y mujeres. 
            La diferencia observada de {abs(p1 - p2):.1%} puntos porcentuales no es estad√≠sticamente significativa.
            """)

    # 1.8 Varianza
    with pruebas_tabs[7]:
        st.write("## 1.8 Prueba de Hip√≥tesis para la Varianza")
        
        st.write("""
        ### Ejemplo: Varianza de la Satisfacci√≥n
        
        **Contexto del Problema:**  
        El centro recreativo desea evaluar si la varianza de la satisfacci√≥n de sus visitantes 
        es diferente de 1 punto cuadrado.
        
        **Planteamiento:**
        - Variable de estudio: Satisfacci√≥n
        - Tama√±o de muestra: 30 visitantes
        - Nivel de significancia (Œ±): 0.05
        """)
        
        # C√°lculos
        n = len(df)
        s2 = df['Satisfaccion'].var()
        sigma2_0 = 1  # Varianza hipot√©tica
        alpha = 0.05
        
        # Estad√≠stico de prueba
        chi2_calc = (n - 1) * s2 / sigma2_0
        
        # Valor cr√≠tico
        chi2_crit = stats.chi2.ppf(1 - alpha, n - 1)
        
        # P-valor
        p_value = 1 - stats.chi2.cdf(chi2_calc, n - 1)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n chi-cuadrado
        x = np.linspace(stats.chi2.ppf(0.001, n - 1), stats.chi2.ppf(0.999, n - 1), 1000)
        y = stats.chi2.pdf(x, n - 1)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva chi-cuadrado
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Chi-Cuadrado',
                               line=dict(color='blue')))
        
        # √Årea de rechazo (cola derecha)
        x_rej = x[x >= chi2_crit]
        y_rej = stats.chi2.pdf(x_rej, n - 1)
        fig.add_trace(go.Scatter(x=x_rej, y=y_rej, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ± = {alpha:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para chi2 calculado
        fig.add_vline(x=chi2_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"chi2 calc = {chi2_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Hip√≥tesis para la Varianza de la Satisfacci√≥n',
            xaxis_title='Estad√≠stico Chi-Cuadrado',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_hipotesis_varianza")
        
# Prueba de Signos: Importancia del Costo vs Preferencia
st.markdown("### Prueba de Signos: Importancia del Costo vs Preferencia")

st.markdown("""
Esta prueba no param√©trica nos permitir√° comparar si existe una diferencia significativa entre 
la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
""")

# Calcular las diferencias y los signos
diferencias = df['Importancia_Costo'] - df['Preferencia']
signos = np.sign(diferencias)

# Contar los signos positivos, negativos y ceros
n_pos = np.sum(signos > 0)
n_neg = np.sum(signos < 0)
n_ceros = np.sum(signos == 0)

# 2. Pruebas No Param√©tricas
with main_tabs[1]:
    st.header("2. Pruebas No Param√©tricas")
    
    # Crear subtabs para cada tipo de prueba no param√©trica
    no_param_tabs = st.tabs([
        "2.1 Prueba de Signos",
        "2.2 Prueba de Rachas"
    ])
    
    # 2.1 Prueba de signos
    with no_param_tabs[0]:
        st.write("## 2.1 Prueba de Signos")
        
        st.write("""
        ### Ejemplo: Importancia del Costo vs Preferencia
        
        Se desea analizar si existe una diferencia significativa entre la importancia que los visitantes 
        le dan al costo y su nivel de preferencia por el lugar. ¬øLa importancia del costo tiende a ser 
        diferente a la preferencia? Utilizaremos un nivel de significancia del 5%.
        """)
        
        # Preparar los datos y calcular diferencias
        datos = pd.DataFrame({
            'ID': df.index + 1,
            'Importancia_Costo': df['Importancia_Costo'],
            'Preferencia': df['Preferencia'],
            'Diferencia': df['Importancia_Costo'] - df['Preferencia']
        })
        
        # Calcular signos
        datos['Signo'] = datos['Diferencia'].apply(lambda x: '+' if x > 0 else ('-' if x < 0 else '0'))
        
        # Mostrar tabla de datos
        st.write("**Datos y Signos:**")
        st.dataframe(datos)
        
        # C√°lculos para la prueba
        n_total = len(datos)
        n_pos = sum(datos['Signo'] == '+')
        n_neg = sum(datos['Signo'] == '-')
        n_ceros = sum(datos['Signo'] == '0')
        n_efectivo = n_total - n_ceros  # excluyendo empates
        
        st.write(f"""
        **Resumen de Signos:**
        - Total de observaciones: {n_total}
        - Diferencias positivas (IC > P): {n_pos}
        - Diferencias negativas (IC < P): {n_neg}
        - Empates (IC = P): {n_ceros}
        - n efectivo (sin empates): {n_efectivo}
        """)
        
        st.write("### Prueba de Hip√≥tesis")
        
        st.write("""
        **Paso 1: Plantear Hip√≥tesis**
        - H‚ÇÄ: Me = 0 (No hay diferencia entre Importancia del Costo y Preferencia)
        - H‚ÇÅ: Me ‚â† 0 (S√≠ hay diferencia entre Importancia del Costo y Preferencia)
        """)
        
        st.write("**Paso 2: Nivel de Significancia**")
        alpha = 0.05
        st.write(f"Œ± = {alpha}")
        
        # Calcular probabilidad binomial
        r = min(n_pos, n_neg) if n_efectivo > 0 else 0
        p_value = 2 * stats.binom.cdf(r, n_efectivo, 0.5) if n_efectivo > 0 else 1.0
        
        st.write(f"""
        **Paso 3: C√°lculo del P-valor**
        - r (m√≠nimo entre n‚Å∫ y n‚Åª) = {r}
        - n efectivo = {n_efectivo}
        - P-valor = {p_value:.4f}
        """)
        
        st.write("### Conclusi√≥n")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que 
            s√≠ existe una diferencia significativa entre la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que exista 
            una diferencia significativa entre la importancia que los visitantes le dan al costo y su nivel de preferencia por el lugar.
            """)

        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Aproximaci√≥n normal para la distribuci√≥n binomial
        mu = n_efectivo * 0.5  # media bajo H0
        sigma = np.sqrt(n_efectivo * 0.5 * 0.5)  # desviaci√≥n est√°ndar bajo H0
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(-4, 4, 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Calcular el Z-score para el valor observado
        z_obs = (r - mu) / sigma
        
        # Agregar l√≠nea vertical para el valor observado
        fig.add_vline(x=z_obs, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z obs = {z_obs:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Signos (Aproximaci√≥n Normal)',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_prueba_signos")
        
    # 2.2 Prueba de rachas
    with no_param_tabs[1]:
        st.write("## 2.2 Prueba de Rachas")
        
        st.write("""
        ### Ejemplo: Aleatoriedad en la Satisfacci√≥n
        
        Se desea evaluar si los niveles de satisfacci√≥n de los visitantes siguen un patr√≥n aleatorio 
        o si existe alguna tendencia. Utilizaremos la mediana como punto de referencia para determinar 
        las rachas. Nivel de significancia: 5%.
        """)
        
        # Preparar los datos
        satisfaccion = df['Satisfaccion'].values
        mediana = np.median(satisfaccion)
        
        # Crear secuencia de signos
        signos = ['+' if x >= mediana else '-' for x in satisfaccion]
        
        # Crear DataFrame para visualizaci√≥n
        datos_rachas = pd.DataFrame({
            'ID': df.index + 1,
            'Satisfaccion': satisfaccion,
            'Signo': signos
        })
        
        # Mostrar tabla de datos
        st.write("**Datos y Signos:**")
        st.write(f"Mediana de Satisfacci√≥n = {mediana}")
        st.write(datos_rachas)
        
        # Contar rachas
        n_rachas = 1
        for i in range(1, len(signos)):
            if signos[i] != signos[i-1]:
                n_rachas += 1
        
        # Contar signos
        n1 = sum(1 for s in signos if s == '+')  # n√∫mero de valores >= mediana
        n2 = sum(1 for s in signos if s == '-')  # n√∫mero de valores < mediana
        n = n1 + n2
        
        # C√°lculos estad√≠sticos
        # Media y varianza del n√∫mero de rachas bajo H0
        media_r = 1 + (2 * n1 * n2) / n
        var_r = (2 * n1 * n2 * (2 * n1 * n2 - n)) / (n * n * (n - 1))
        
        # Estad√≠stico Z
        z_calc = (n_rachas - media_r) / np.sqrt(var_r)
        
        # Valores cr√≠ticos y p-valor (prueba bilateral)
        alpha = 0.05
        z_crit = stats.norm.ppf(1 - alpha/2)
        p_value = 2 * (1 - stats.norm.cdf(abs(z_calc)))
        
        st.write("""
        ### Prueba de Hip√≥tesis
        
        **Paso 1: Plantear Hip√≥tesis**
        - H‚ÇÄ: La secuencia es aleatoria
        - H‚ÇÅ: La secuencia no es aleatoria
        """)
        
        st.write(f"""
        **Paso 2: Estad√≠sticos**
        - N√∫mero de rachas (R) = {n_rachas}
        - n‚ÇÅ (‚â• mediana) = {n1}
        - n‚ÇÇ (< mediana) = {n2}
        - Media de R = {media_r:.4f}
        - Varianza de R = {var_r:.4f}
        - Z calculado = {z_calc:.4f}
        - Z cr√≠tico = ¬±{z_crit:.4f}
        - P-valor = {p_value:.4f}
        """)
        
        # Visualizaci√≥n
        st.write("### Visualizaci√≥n")
        
        # Crear datos para la distribuci√≥n normal
        x = np.linspace(-4, 4, 1000)
        y = stats.norm.pdf(x)
        
        # Crear figura
        fig = go.Figure()
        
        # Agregar la curva normal
        fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Distribuci√≥n Normal',
                               line=dict(color='blue')))
        
        # √Åreas de rechazo
        x_rej_izq = x[x <= -z_crit]
        y_rej_izq = stats.norm.pdf(x_rej_izq)
        fig.add_trace(go.Scatter(x=x_rej_izq, y=y_rej_izq, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        x_rej_der = x[x >= z_crit]
        y_rej_der = stats.norm.pdf(x_rej_der)
        fig.add_trace(go.Scatter(x=x_rej_der, y=y_rej_der, 
                               fill='tozeroy', 
                               name=f'Regi√≥n de Rechazo (Œ±/2 = {alpha/2:.3f})',
                               line=dict(color='red', width=0)))
        
        # Agregar l√≠nea vertical para z calculado
        fig.add_vline(x=z_calc, 
                     line_dash="dash", 
                     line_color="green",
                     annotation_text=f"z calc = {z_calc:.4f}",
                     annotation_position="top")
        
        # Actualizar layout
        fig.update_layout(
            title='Prueba de Rachas',
            xaxis_title='Estad√≠stico Z',
            yaxis_title='Densidad',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True, key="plot_prueba_rachas")
        
        # Interpretaci√≥n
        st.write("### Conclusi√≥n")
        if p_value < alpha:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es menor que Œ± ({alpha}), se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, existe evidencia estad√≠stica suficiente para concluir que 
            la secuencia de niveles de satisfacci√≥n no es aleatoria, lo que sugiere la presencia de alg√∫n 
            patr√≥n o tendencia en las calificaciones de los visitantes.
            """)
        else:
            st.write(f"""
            Como el p-valor ({p_value:.4f}) es mayor que Œ± ({alpha}), no se rechaza H‚ÇÄ.
            
            **Interpretaci√≥n:**  
            Con un nivel de confianza del 95%, no existe evidencia estad√≠stica suficiente para concluir que 
            la secuencia de niveles de satisfacci√≥n no sea aleatoria. Los datos sugieren que las calificaciones 
            de satisfacci√≥n no siguen ning√∫n patr√≥n espec√≠fico.
            """)
